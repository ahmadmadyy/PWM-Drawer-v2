
OLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00002746  000027da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000477  0080019a  0080019a  00002874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002be0  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005a535  00000000  00000000  000054c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028c8  00000000  00000000  0005f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000fde7  00000000  00000000  000622c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00011134  00000000  00000000  000720a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014eb7  00000000  00000000  000831dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006ae33  00000000  00000000  00098093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002a78  00000000  00000000  00102ec6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__ctors_end>
       4:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
       8:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
       c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      10:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      14:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      18:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      1c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      20:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      24:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      28:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      2c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      30:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      34:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      38:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      3c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      40:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      44:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      48:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      4c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      50:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      54:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      58:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      5c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      60:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>
      64:	0c 94 ab 03 	jmp	0x756	; 0x756 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 00       	.word	0x00bf	; ????
      6a:	02 02       	muls	r16, r18
      6c:	03 04       	cpc	r0, r3
      6e:	03 04       	cpc	r0, r3
      70:	04 05       	cpc	r16, r4
      72:	08 00       	.word	0x0008	; ????
      74:	ff 06       	cpc	r15, r31
      76:	ff 06       	cpc	r15, r31
      78:	00 01       	movw	r0, r0
      7a:	1a 02       	muls	r17, r26
      7c:	31 06       	cpc	r3, r17
      7e:	96 20       	and	r9, r6
      80:	05 00       	.word	0x0005	; ????
      82:	7e 03       	fmul	r23, r22
      84:	21 07       	cpc	r18, r17
      86:	31 63       	ori	r19, 0x31	; 49
      88:	33 52       	subi	r19, 0x23	; 35
      8a:	00 22       	and	r0, r16
      8c:	07 9b       	sbis	0x00, 7	; 0
      8e:	6e 93       	st	-X, r22
      90:	ac 00       	.word	0x00ac	; ????
      92:	23 0d       	add	r18, r3
      94:	3d 62       	ori	r19, 0x2D	; 45
      96:	57 a6       	std	Z+47, r5	; 0x2f
      98:	34 54       	subi	r19, 0x44	; 68
      9a:	35 54       	subi	r19, 0x45	; 69
      9c:	99 12       	cpse	r9, r25
      9e:	00 24       	eor	r0, r0
      a0:	0a 3d       	cpi	r16, 0xDA	; 218
      a2:	62 9b       	sbis	0x0c, 2	; 12
      a4:	57 bd       	out	0x27, r21	; 39
      a6:	53 da       	rcall	.-2906   	; 0xfffff54e <__eeprom_end+0xff7ef54e>
      a8:	11 25       	eor	r17, r1
      aa:	08 ab       	std	Y+48, r16	; 0x30
      ac:	66 13       	cpse	r22, r22
      ae:	53 67       	ori	r21, 0x73	; 115
      b0:	00 26       	eor	r0, r16
      b2:	0a 3c       	cpi	r16, 0xCA	; 202
      b4:	62 17       	cp	r22, r18
      b6:	53 b3       	in	r21, 0x13	; 19
      b8:	6a a6       	std	Y+42, r6	; 0x2a
      ba:	00 27       	eor	r16, r16
      bc:	05 19       	sub	r16, r5
      be:	6f 33       	cpi	r22, 0x3F	; 63
      c0:	28 07       	cpc	r18, r24
      c2:	b2 62       	ori	r27, 0x22	; 34
      c4:	a7 9a       	sbi	0x14, 7	; 20
      c6:	01 29       	or	r16, r1
      c8:	08 b2       	in	r0, 0x18	; 24
      ca:	62 13       	cpse	r22, r18
      cc:	53 a5       	ldd	r21, Z+43	; 0x2b
      ce:	00 2a       	or	r0, r16
      d0:	0a 2c       	mov	r0, r10
      d2:	62 13       	cpse	r22, r18
      d4:	93 1a       	sub	r9, r19
      d6:	49 c5       	rjmp	.+2706   	; 0xb6a <u8g2_font_decode_len+0x64>
      d8:	00 2b       	or	r16, r16
      da:	0a 2d       	mov	r16, r10
      dc:	62 9b       	sbis	0x0c, 2	; 12
      de:	51 1c       	adc	r5, r1
      e0:	32 a3       	std	Z+34, r19	; 0x22
      e2:	08 2c       	mov	r0, r8
      e4:	07 9b       	sbis	0x00, 7	; 0
      e6:	5e a7       	std	Y+46, r21	; 0x2e
      e8:	4a 00       	.word	0x004a	; ????
      ea:	2d 06       	cpc	r2, r29
      ec:	0c 6a       	ori	r16, 0xAC	; 172
      ee:	33 02       	muls	r19, r19
      f0:	2e 07       	cpc	r18, r30
      f2:	9b 5e       	subi	r25, 0xEB	; 235
      f4:	97 56       	subi	r25, 0x67	; 103
      f6:	02 2f       	mov	r16, r18
      f8:	08 34       	cpi	r16, 0x48	; 72
      fa:	62 5f       	subi	r22, 0xF2	; 242
      fc:	b6 33       	cpi	r27, 0x36	; 54
      fe:	00 30       	cpi	r16, 0x00	; 0
     100:	08 b3       	in	r16, 0x18	; 24
     102:	62 57       	subi	r22, 0x72	; 114
     104:	b9 2a       	or	r11, r25
     106:	00 31       	cpi	r16, 0x10	; 16
     108:	07 b3       	in	r16, 0x17	; 23
     10a:	62 97       	sbiw	r28, 0x12	; 18
     10c:	64 6b       	ori	r22, 0xB4	; 180
     10e:	32 0a       	sbc	r3, r18
     110:	34 62       	ori	r19, 0x24	; 36
     112:	a7 62       	ori	r26, 0x27	; 39
     114:	4e 2a       	or	r4, r30
     116:	8f 00       	.word	0x008f	; ????
     118:	33 0a       	sbc	r3, r19
     11a:	34 62       	ori	r19, 0x24	; 36
     11c:	33 62       	ori	r19, 0x23	; 35
     11e:	d4 48       	sbci	r29, 0x84	; 132
     120:	26 05       	cpc	r18, r6
     122:	34 0a       	sbc	r3, r20
     124:	34 62       	ori	r19, 0x24	; 36
     126:	1b 55       	subi	r17, 0x5B	; 91
     128:	35 62       	ori	r19, 0x25	; 37
     12a:	4e 00       	.word	0x004e	; ????
     12c:	35 0a       	sbc	r3, r21
     12e:	34 62       	ori	r19, 0x24	; 36
     130:	33 f4       	brvc	.+12     	; 0x13e <__trampolines_end+0xd6>
     132:	46 32       	cpi	r20, 0x26	; 38
     134:	29 00       	.word	0x0029	; ????
     136:	36 0a       	sbc	r3, r22
     138:	34 62       	ori	r19, 0x24	; 36
     13a:	a7 f2       	brie	.-88     	; 0xe4 <__trampolines_end+0x7c>
     13c:	8a 32       	cpi	r24, 0x2A	; 42
     13e:	29 00       	.word	0x0029	; ????
     140:	37 0a       	sbc	r3, r23
     142:	34 62       	ori	r19, 0x24	; 36
     144:	33 72       	andi	r19, 0x23	; 35
     146:	cc 31       	cpi	r28, 0x1C	; 28
     148:	47 00       	.word	0x0047	; ????
     14a:	38 0a       	sbc	r3, r24
     14c:	34 62       	ori	r19, 0x24	; 36
     14e:	a7 62       	ori	r26, 0x27	; 39
     150:	52 51       	subi	r21, 0x12	; 18
     152:	26 05       	cpc	r18, r6
     154:	39 0a       	sbc	r3, r25
     156:	34 62       	ori	r19, 0x24	; 36
     158:	a7 a2       	std	Z+39, r10	; 0x27
     15a:	4c 3b       	cpi	r20, 0xBC	; 188
     15c:	29 00       	.word	0x0029	; ????
     15e:	3a 07       	cpc	r19, r26
     160:	aa 62       	ori	r26, 0x2A	; 42
     162:	33 e2       	ldi	r19, 0x23	; 35
     164:	08 3b       	cpi	r16, 0xB8	; 184
     166:	08 b3       	in	r16, 0x18	; 24
     168:	5e 67       	ori	r21, 0x7E	; 126
     16a:	23 55       	subi	r18, 0x53	; 83
     16c:	02 3c       	cpi	r16, 0xC2	; 194
     16e:	07 b3       	in	r16, 0x17	; 23
     170:	62 9b       	sbis	0x0c, 2	; 12
     172:	ca 5c       	subi	r28, 0xCA	; 202
     174:	3d 08       	sbc	r3, r13
     176:	1c 66       	ori	r17, 0x6C	; 108
     178:	33 32       	cpi	r19, 0x23	; 35
     17a:	1a 01       	movw	r2, r20
     17c:	3e 08       	sbc	r3, r14
     17e:	b3 62       	ori	r27, 0x23	; 35
     180:	93 cb       	rjmp	.-2266   	; 0xfffff8a8 <__eeprom_end+0xff7ef8a8>
     182:	54 02       	muls	r21, r20
     184:	3f 09       	sbc	r19, r15
     186:	b3 62       	ori	r27, 0x23	; 35
     188:	d7 4c       	sbci	r29, 0xC7	; 199
     18a:	19 26       	eor	r1, r25
     18c:	00 40       	sbci	r16, 0x00	; 0
     18e:	0c 45       	sbci	r16, 0x5C	; 92
     190:	5e 2b       	or	r21, r30
     192:	a3 5c       	subi	r26, 0xC3	; 195
     194:	49 25       	eor	r20, r9
     196:	59 43       	sbci	r21, 0x39	; 57
     198:	05 41       	sbci	r16, 0x15	; 21
     19a:	09 34       	cpi	r16, 0x49	; 73
     19c:	62 a7       	std	Z+42, r22	; 0x2a
     19e:	a2 1c       	adc	r10, r2
     1a0:	53 06       	cpc	r5, r19
     1a2:	42 0a       	sbc	r4, r18
     1a4:	34 62       	ori	r19, 0x24	; 36
     1a6:	b3 e2       	ldi	r27, 0x23	; 35
     1a8:	48 51       	subi	r20, 0x18	; 24
     1aa:	8e 04       	cpc	r8, r14
     1ac:	43 09       	sbc	r20, r3
     1ae:	34 62       	ori	r19, 0x24	; 36
     1b0:	a7 a2       	std	Z+39, r10	; 0x27
     1b2:	2e 93       	st	-X, r18
     1b4:	02 44       	sbci	r16, 0x42	; 66
     1b6:	09 34       	cpi	r16, 0x49	; 73
     1b8:	62 b3       	in	r22, 0x12	; 18
     1ba:	a2 73       	andi	r26, 0x32	; 50
     1bc:	24 00       	.word	0x0024	; ????
     1be:	45 09       	sbc	r20, r5
     1c0:	34 62       	ori	r19, 0x24	; 36
     1c2:	33 f4       	brvc	.+12     	; 0x1d0 <__trampolines_end+0x168>
     1c4:	ca 79       	andi	r28, 0x9A	; 154
     1c6:	04 46       	sbci	r16, 0x64	; 100
     1c8:	09 34       	cpi	r16, 0x49	; 73
     1ca:	62 33       	cpi	r22, 0x32	; 50
     1cc:	f4 ca       	rjmp	.-2584   	; 0xfffff7b6 <__eeprom_end+0xff7ef7b6>
     1ce:	35 00       	.word	0x0035	; ????
     1d0:	47 0a       	sbc	r4, r23
     1d2:	34 62       	ori	r19, 0x24	; 36
     1d4:	a7 a2       	std	Z+39, r10	; 0x27
     1d6:	4e 33       	cpi	r20, 0x3E	; 62
     1d8:	29 00       	.word	0x0029	; ????
     1da:	48 09       	sbc	r20, r8
     1dc:	34 62       	ori	r19, 0x24	; 36
     1de:	13 e5       	ldi	r17, 0x53	; 83
     1e0:	98 66       	ori	r25, 0x68	; 104
     1e2:	00 49       	sbci	r16, 0x90	; 144
     1e4:	07 b3       	in	r16, 0x17	; 23
     1e6:	62 b3       	in	r22, 0x12	; 18
     1e8:	62 6b       	ori	r22, 0xB2	; 178
     1ea:	4a 09       	sbc	r20, r10
     1ec:	34 62       	ori	r19, 0x24	; 36
     1ee:	37 73       	andi	r19, 0x37	; 55
     1f0:	55 46       	sbci	r21, 0x65	; 101
     1f2:	00 4b       	sbci	r16, 0xB0	; 176
     1f4:	09 34       	cpi	r16, 0x49	; 73
     1f6:	62 13       	cpse	r22, r18
     1f8:	55 92       	las	Z, r5
     1fa:	a9 33       	cpi	r26, 0x39	; 57
     1fc:	4c 08       	sbc	r4, r12
     1fe:	34 62       	ori	r19, 0x24	; 36
     200:	93 bb       	out	0x13, r25	; 19
     202:	47 00       	.word	0x0047	; ????
     204:	4d 09       	sbc	r20, r13
     206:	34 62       	ori	r19, 0x24	; 36
     208:	13 c7       	rjmp	.+3622   	; 0x1030 <u8g2_UpdateRefHeight+0x14>
     20a:	11 cd       	rjmp	.-1502   	; 0xfffffc2e <__eeprom_end+0xff7efc2e>
     20c:	00 4e       	sbci	r16, 0xE0	; 224
     20e:	09 34       	cpi	r16, 0x49	; 73
     210:	62 13       	cpse	r22, r18
     212:	d7 58       	subi	r29, 0x87	; 135
     214:	67 00       	.word	0x0067	; ????
     216:	4f 09       	sbc	r20, r15
     218:	34 62       	ori	r19, 0x24	; 36
     21a:	a7 a2       	std	Z+39, r10	; 0x27
     21c:	33 29       	or	r19, r3
     21e:	00 50       	subi	r16, 0x00	; 0
     220:	0a 34       	cpi	r16, 0x4A	; 74
     222:	62 b3       	in	r22, 0x12	; 18
     224:	a2 1c       	adc	r10, r2
     226:	29 67       	ori	r18, 0x79	; 121
     228:	00 51       	subi	r16, 0x10	; 16
     22a:	09 3c       	cpi	r16, 0xC9	; 201
     22c:	5e a7       	std	Y+46, r21	; 0x2e
     22e:	a2 5c       	subi	r26, 0xC2	; 194
     230:	6e 14       	cp	r6, r14
     232:	52 0a       	sbc	r5, r18
     234:	34 62       	ori	r19, 0x24	; 36
     236:	b3 a2       	std	Z+35, r11	; 0x23
     238:	1c 29       	or	r17, r12
     23a:	ca 00       	.word	0x00ca	; ????
     23c:	53 0a       	sbc	r5, r19
     23e:	34 62       	ori	r19, 0x24	; 36
     240:	a7 62       	ori	r26, 0x27	; 39
     242:	ca a8       	ldd	r12, Y+50	; 0x32
     244:	4c 0a       	sbc	r4, r28
     246:	54 08       	sbc	r5, r4
     248:	b3 62       	ori	r27, 0x23	; 35
     24a:	b3 62       	ori	r27, 0x23	; 35
     24c:	17 00       	.word	0x0017	; ????
     24e:	55 08       	sbc	r5, r5
     250:	34 62       	ori	r19, 0x24	; 36
     252:	13 3d       	cpi	r17, 0xD3	; 211
     254:	93 02       	muls	r25, r19
     256:	56 09       	sbc	r21, r6
     258:	34 62       	ori	r19, 0x24	; 36
     25a:	13 9d       	mul	r17, r3
     25c:	49 2a       	or	r4, r25
     25e:	00 57       	subi	r16, 0x70	; 112
     260:	09 34       	cpi	r16, 0x49	; 73
     262:	62 13       	cpse	r22, r18
     264:	cd 71       	andi	r28, 0x1D	; 29
     266:	c4 00       	.word	0x00c4	; ????
     268:	58 0a       	sbc	r5, r24
     26a:	34 62       	ori	r19, 0x24	; 36
     26c:	13 65       	ori	r17, 0x53	; 83
     26e:	92 2a       	or	r9, r18
     270:	ca 00       	.word	0x00ca	; ????
     272:	59 0b       	sbc	r21, r25
     274:	35 62       	ori	r19, 0x25	; 37
     276:	93 75       	andi	r25, 0x53	; 83
     278:	aa 33       	cpi	r26, 0x3A	; 58
     27a:	ca 28       	or	r12, r10
     27c:	02 5a       	subi	r16, 0xA2	; 162
     27e:	09 34       	cpi	r16, 0x49	; 73
     280:	62 33       	cpi	r22, 0x32	; 50
     282:	72 6c       	ori	r23, 0xC2	; 194
     284:	8f 00       	.word	0x008f	; ????
     286:	5b 07       	cpc	r21, r27
     288:	b3 62       	ori	r27, 0x23	; 35
     28a:	33 62       	ori	r19, 0x23	; 35
     28c:	73 5c       	subi	r23, 0xC3	; 195
     28e:	0a 34       	cpi	r16, 0x4A	; 74
     290:	62 93       	st	-Z, r22
     292:	33 ca       	rjmp	.-2970   	; 0xfffff6fa <__eeprom_end+0xff7ef6fa>
     294:	28 a3       	std	Y+32, r18	; 0x20
     296:	1c 5d       	subi	r17, 0xDC	; 220
     298:	07 b3       	in	r16, 0x17	; 23
     29a:	62 33       	cpi	r22, 0x32	; 50
     29c:	9b 23       	and	r25, r27
     29e:	5e 06       	cpc	r5, r30
     2a0:	93 72       	andi	r25, 0x23	; 35
     2a2:	d7 00       	.word	0x00d7	; ????
     2a4:	5f 06       	cpc	r5, r31
     2a6:	0c 5e       	subi	r16, 0xEC	; 236
     2a8:	33 02       	muls	r19, r19
     2aa:	60 06       	cpc	r6, r16
     2ac:	92 72       	andi	r25, 0x22	; 34
     2ae:	13 03       	mulsu	r17, r19
     2b0:	61 08       	sbc	r6, r1
     2b2:	24 62       	ori	r18, 0x24	; 36
     2b4:	37 a2       	std	Z+39, r3	; 0x27
     2b6:	4c 03       	fmul	r20, r20
     2b8:	62 0a       	sbc	r6, r18
     2ba:	34 62       	ori	r19, 0x24	; 36
     2bc:	93 f3       	brvs	.-28     	; 0x2a2 <__trampolines_end+0x23a>
     2be:	8a 72       	andi	r24, 0x2A	; 42
     2c0:	24 00       	.word	0x0024	; ????
     2c2:	63 07       	cpc	r22, r19
     2c4:	a3 62       	ori	r26, 0x23	; 35
     2c6:	37 b3       	in	r19, 0x17	; 23
     2c8:	00 64       	ori	r16, 0x40	; 64
     2ca:	09 34       	cpi	r16, 0x49	; 73
     2cc:	62 5f       	subi	r22, 0xF2	; 242
     2ce:	8d 28       	or	r8, r13
     2d0:	d3 00       	.word	0x00d3	; ????
     2d2:	65 08       	sbc	r6, r5
     2d4:	24 62       	ori	r18, 0x24	; 36
     2d6:	a7 d2       	rcall	.+1358   	; 0x826 <u8g2_ClearBuffer+0x1a>
     2d8:	c8 0a       	sbc	r12, r24
     2da:	66 09       	sbc	r22, r6
     2dc:	34 62       	ori	r19, 0x24	; 36
     2de:	5b 95       	.word	0x955b	; ????
     2e0:	33 47       	sbci	r19, 0x73	; 115
     2e2:	00 67       	ori	r16, 0x70	; 112
     2e4:	09 2c       	mov	r0, r9
     2e6:	5e a7       	std	Y+46, r21	; 0x2e
     2e8:	62 da       	rcall	.-2876   	; 0xfffff7ae <__eeprom_end+0xff7ef7ae>
     2ea:	49 01       	movw	r8, r18
     2ec:	68 09       	sbc	r22, r8
     2ee:	34 62       	ori	r19, 0x24	; 36
     2f0:	93 f3       	brvs	.-28     	; 0x2d6 <__trampolines_end+0x26e>
     2f2:	8a 66       	ori	r24, 0x6A	; 106
     2f4:	00 69       	ori	r16, 0x90	; 144
     2f6:	08 b3       	in	r16, 0x18	; 24
     2f8:	62 97       	sbiw	r28, 0x12	; 18
     2fa:	91 ac       	ldd	r9, Z+57	; 0x39
     2fc:	06 6a       	ori	r16, 0xA6	; 166
     2fe:	09 bb       	out	0x19, r16	; 25
     300:	5e 9b       	sbis	0x0b, 6	; 11
     302:	61 a9       	ldd	r22, Z+49	; 0x31
     304:	2a 00       	.word	0x002a	; ????
     306:	6b 09       	sbc	r22, r11
     308:	34 62       	ori	r19, 0x24	; 36
     30a:	93 cb       	rjmp	.-2266   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
     30c:	91 a2       	std	Z+33, r9	; 0x21
     30e:	0c 6c       	ori	r16, 0xCC	; 204
     310:	07 b3       	in	r16, 0x17	; 23
     312:	62 23       	and	r22, r18
     314:	bb 06       	cpc	r11, r27
     316:	6d 09       	sbc	r22, r13
     318:	25 62       	ori	r18, 0x25	; 37
     31a:	a3 5a       	subi	r26, 0xA3	; 163
     31c:	2a a9       	ldd	r18, Y+50	; 0x32
     31e:	02 6e       	ori	r16, 0xE2	; 226
     320:	07 24       	eor	r0, r7
     322:	62 b3       	in	r22, 0x12	; 18
     324:	a2 19       	sub	r26, r2
     326:	6f 08       	sbc	r6, r15
     328:	24 62       	ori	r18, 0x24	; 36
     32a:	a7 a2       	std	Z+39, r10	; 0x27
     32c:	4c 0a       	sbc	r4, r28
     32e:	70 09       	sbc	r23, r0
     330:	2c 5e       	subi	r18, 0xEC	; 236
     332:	b3 e2       	ldi	r27, 0x23	; 35
     334:	48 39       	cpi	r20, 0x98	; 152
     336:	03 71       	andi	r16, 0x13	; 19
     338:	08 2c       	mov	r0, r8
     33a:	5e 37       	cpi	r21, 0x7E	; 126
     33c:	62 da       	rcall	.-2876   	; 0xfffff802 <__eeprom_end+0xff7ef802>
     33e:	05 72       	andi	r16, 0x25	; 37
     340:	08 24       	eor	r0, r8
     342:	62 93       	st	-Z, r22
     344:	92 9d       	mul	r25, r2
     346:	01 73       	andi	r16, 0x31	; 49
     348:	07 a3       	std	Z+39, r16	; 0x27
     34a:	62 37       	cpi	r22, 0x72	; 114
     34c:	f2 02       	muls	r31, r18
     34e:	74 0a       	sbc	r7, r20
     350:	34 62       	ori	r19, 0x24	; 36
     352:	97 e3       	ldi	r25, 0x37	; 55
     354:	cc 29       	or	r28, r12
     356:	26 00       	.word	0x0026	; ????
     358:	75 07       	cpc	r23, r21
     35a:	24 62       	ori	r18, 0x24	; 36
     35c:	13 cd       	rjmp	.-1498   	; 0xfffffd84 <__eeprom_end+0xff7efd84>
     35e:	34 76       	andi	r19, 0x64	; 100
     360:	07 a3       	std	Z+39, r16	; 0x27
     362:	62 93       	st	-Z, r22
     364:	ac 0a       	sbc	r10, r28
     366:	77 09       	sbc	r23, r7
     368:	25 62       	ori	r18, 0x25	; 37
     36a:	93 55       	subi	r25, 0x53	; 83
     36c:	52 5d       	subi	r21, 0xD2	; 210
     36e:	00 78       	andi	r16, 0x80	; 128
     370:	08 24       	eor	r0, r8
     372:	62 13       	cpse	r22, r18
     374:	93 54       	subi	r25, 0x43	; 67
     376:	31 79       	andi	r19, 0x91	; 145
     378:	0a 2c       	mov	r0, r10
     37a:	5e 13       	cpse	r21, r30
     37c:	65 1a       	sub	r6, r21
     37e:	31 29       	or	r19, r1
     380:	00 7a       	andi	r16, 0xA0	; 160
     382:	08 24       	eor	r0, r8
     384:	62 33       	cpi	r22, 0x32	; 50
     386:	62 39       	cpi	r22, 0x92	; 146
     388:	02 7b       	andi	r16, 0xB2	; 178
     38a:	0b 3c       	cpi	r16, 0xCB	; 203
     38c:	62 ab       	std	Z+50, r22	; 0x32
     38e:	32 4a       	sbci	r19, 0xA2	; 162
     390:	1a c5       	rjmp	.+2612   	; 0xdc6 <u8g2_font_get_glyph_data+0x1e>
     392:	8c 04       	cpc	r8, r12
     394:	7c 05       	cpc	r23, r12
     396:	31 63       	ori	r19, 0x31	; 49
     398:	73 7d       	andi	r23, 0xD3	; 211
     39a:	0c 3c       	cpi	r16, 0xCC	; 204
     39c:	62 a3       	std	Z+34, r22	; 0x22
     39e:	51 cc       	rjmp	.-1886   	; 0xfffffc42 <__eeprom_end+0xff7efc42>
     3a0:	48 65       	ori	r20, 0x58	; 88
     3a2:	94 24       	eor	r9, r4
     3a4:	00 7e       	andi	r16, 0xE0	; 224
     3a6:	07 14       	cp	r0, r7
     3a8:	72 97       	sbiw	r30, 0x12	; 18
     3aa:	54 02       	muls	r21, r20
     3ac:	a0 05       	cpc	r26, r0
     3ae:	00 7e       	andi	r16, 0xE0	; 224
     3b0:	03 a1       	ldd	r16, Z+35	; 0x23
     3b2:	07 31       	cpi	r16, 0x17	; 23
     3b4:	63 93       	.word	0x9363	; ????
     3b6:	46 00       	.word	0x0046	; ????
     3b8:	a2 09       	sbc	r26, r2
     3ba:	34 5e       	subi	r19, 0xE4	; 228
     3bc:	1b 47       	sbci	r17, 0x7B	; 123
     3be:	6a ce       	rjmp	.-812    	; 0x94 <__trampolines_end+0x2c>
     3c0:	04 a3       	std	Z+36, r16	; 0x24
     3c2:	0a 34       	cpi	r16, 0x4A	; 74
     3c4:	62 5b       	subi	r22, 0xB2	; 178
     3c6:	8d 98       	cbi	0x11, 5	; 17
     3c8:	93 4a       	sbci	r25, 0xA3	; 163
     3ca:	00 a4       	ldd	r0, Z+40	; 0x28
     3cc:	0a 2d       	mov	r16, r10
     3ce:	62 93       	st	-Z, r22
     3d0:	d3 4c       	sbci	r29, 0xC3	; 195
     3d2:	71 e5       	ldi	r23, 0x51	; 81
     3d4:	00 a5       	ldd	r16, Z+40	; 0x28
     3d6:	0b 35       	cpi	r16, 0x5B	; 91
     3d8:	62 93       	st	-Z, r22
     3da:	53 35       	cpi	r21, 0x53	; 83
     3dc:	64 1c       	adc	r6, r4
     3de:	32 02       	muls	r19, r18
     3e0:	a6 06       	cpc	r10, r22
     3e2:	39 63       	ori	r19, 0x39	; 57
     3e4:	b3 06       	cpc	r11, r19
     3e6:	a7 0a       	sbc	r10, r23
     3e8:	3c 62       	ori	r19, 0x2C	; 44
     3ea:	37 f2       	brie	.-116    	; 0x378 <__trampolines_end+0x310>
     3ec:	8a 69       	ori	r24, 0x9A	; 154
     3ee:	8f 04       	cpc	r8, r15
     3f0:	a8 06       	cpc	r10, r24
     3f2:	8b 76       	andi	r24, 0x6B	; 107
     3f4:	93 02       	muls	r25, r19
     3f6:	a9 0a       	sbc	r10, r25
     3f8:	35 62       	ori	r19, 0x25	; 37
     3fa:	b7 aa       	std	Z+55, r11	; 0x37
     3fc:	39 55       	subi	r19, 0x59	; 89
     3fe:	b5 00       	.word	0x00b5	; ????
     400:	aa 07       	cpc	r26, r26
     402:	ab 6a       	ori	r26, 0xAB	; 171
     404:	b7 92       	lat	Z, r11
     406:	1e ab       	std	Y+54, r17	; 0x36
     408:	08 1c       	adc	r0, r8
     40a:	66 97       	sbiw	r28, 0x16	; 22
     40c:	54 4c       	sbci	r21, 0xC4	; 196
     40e:	01 ac       	ldd	r0, Z+57	; 0x39
     410:	06 9b       	sbis	0x00, 6	; 0
     412:	62 33       	cpi	r22, 0x32	; 50
     414:	0b ad       	ldd	r16, Y+59	; 0x3b
     416:	05 8b       	std	Z+21, r16	; 0x15
     418:	6a 33       	cpi	r22, 0x3A	; 58
     41a:	ae 09       	sbc	r26, r14
     41c:	35 62       	ori	r19, 0x25	; 37
     41e:	f7 a1       	ldd	r31, Z+39	; 0x27
     420:	96 5a       	subi	r25, 0xA6	; 166
     422:	00 af       	std	Z+56, r16	; 0x38
     424:	05 8b       	std	Z+21, r16	; 0x15
     426:	76 33       	cpi	r23, 0x36	; 54
     428:	b0 06       	cpc	r11, r16
     42a:	9b 6e       	ori	r25, 0xEB	; 235
     42c:	d7 05       	cpc	r29, r7
     42e:	b1 08       	sbc	r11, r1
     430:	ab 62       	ori	r26, 0x2B	; 43
     432:	97 56       	subi	r25, 0x67	; 103
     434:	46 03       	mulsu	r20, r22
     436:	b2 07       	cpc	r27, r18
     438:	ab 6a       	ori	r26, 0xAB	; 171
     43a:	d7 4c       	sbci	r29, 0xC7	; 199
     43c:	69 b3       	in	r22, 0x19	; 25
     43e:	07 ab       	std	Z+55, r16	; 0x37
     440:	6a a3       	std	Y+34, r22	; 0x22
     442:	2f 00       	.word	0x002f	; ????
     444:	b4 06       	cpc	r11, r20
     446:	92 72       	andi	r25, 0x22	; 34
     448:	a7 00       	.word	0x00a7	; ????
     44a:	b5 09       	sbc	r27, r5
     44c:	2c 5e       	subi	r18, 0xEC	; 236
     44e:	13 cd       	rjmp	.-1498   	; 0xfffffe76 <__eeprom_end+0xff7efe76>
     450:	91 32       	cpi	r25, 0x21	; 33
     452:	00 b6       	in	r0, 0x30	; 48
     454:	0c 35       	cpi	r16, 0x5C	; 92
     456:	62 37       	cpi	r22, 0x72	; 114
     458:	46 1a       	sub	r4, r22
     45a:	29 a9       	ldd	r18, Y+49	; 0x31
     45c:	98 62       	ori	r25, 0x28	; 40
     45e:	0a b7       	in	r16, 0x3a	; 58
     460:	05 09       	sbc	r16, r5
     462:	6b 13       	cpse	r22, r27
     464:	b8 06       	cpc	r11, r24
     466:	92 5e       	subi	r25, 0xE2	; 226
     468:	a7 00       	.word	0x00a7	; ????
     46a:	b9 07       	cpc	r27, r25
     46c:	ab 6a       	ori	r26, 0xAB	; 171
     46e:	97 64       	ori	r25, 0x47	; 71
     470:	35 ba       	out	0x15, r3	; 21
     472:	07 ab       	std	Z+55, r16	; 0x37
     474:	6a d7       	rcall	.+3796   	; 0x134a <u8g2_IsIntersection+0x24>
     476:	8d 06       	cpc	r8, r29
     478:	bb 08       	sbc	r11, r11
     47a:	1c 66       	ori	r17, 0x6C	; 108
     47c:	93 62       	ori	r25, 0x23	; 35
     47e:	52 09       	sbc	r21, r2
     480:	bc 0a       	sbc	r11, r28
     482:	3c 62       	ori	r19, 0x2C	; 44
     484:	93 5b       	subi	r25, 0xB3	; 179
     486:	51 8d       	ldd	r21, Z+25	; 0x19
     488:	98 00       	.word	0x0098	; ????
     48a:	bd 0a       	sbc	r11, r29
     48c:	3c 62       	ori	r19, 0x2C	; 44
     48e:	93 ab       	std	Z+51, r25	; 0x33
     490:	a4 72       	andi	r26, 0x24	; 36
     492:	8c 03       	fmulsu	r16, r20
     494:	be 0c       	add	r11, r14
     496:	3c 62       	ori	r19, 0x2C	; 44
     498:	93 51       	subi	r25, 0x13	; 19
     49a:	cc 48       	sbci	r28, 0x8C	; 140
     49c:	55 23       	and	r21, r21
     49e:	26 00       	.word	0x0026	; ????
     4a0:	bf 09       	sbc	r27, r15
     4a2:	b3 62       	ori	r27, 0x23	; 35
     4a4:	97 61       	ori	r25, 0x17	; 23
     4a6:	8a a9       	ldd	r24, Y+50	; 0x32
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
     4aa:	0a 3c       	cpi	r16, 0xCA	; 202
     4ac:	62 97       	sbiw	r28, 0x12	; 18
     4ae:	51 54       	subi	r21, 0x41	; 65
     4b0:	71 4c       	sbci	r23, 0xC1	; 193
     4b2:	19 c1       	rjmp	.+562    	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
     4b4:	09 3c       	cpi	r16, 0xC9	; 201
     4b6:	62 5b       	subi	r22, 0xB2	; 178
     4b8:	ab 38       	cpi	r26, 0x8B	; 139
     4ba:	a6 0c       	add	r10, r6
     4bc:	c2 0a       	sbc	r12, r18
     4be:	3c 62       	ori	r19, 0x2C	; 44
     4c0:	a7 62       	ori	r26, 0x27	; 39
     4c2:	52 71       	andi	r21, 0x12	; 18
     4c4:	4c 19       	sub	r20, r12
     4c6:	c3 0a       	sbc	r12, r19
     4c8:	3c 62       	ori	r19, 0x2C	; 44
     4ca:	97 54       	subi	r25, 0x47	; 71
     4cc:	54 71       	andi	r21, 0x14	; 20
     4ce:	4c 19       	sub	r20, r12
     4d0:	c4 0a       	sbc	r12, r20
     4d2:	3c 62       	ori	r19, 0x2C	; 44
     4d4:	13 33       	cpi	r17, 0x33	; 51
     4d6:	54 71       	andi	r21, 0x14	; 20
     4d8:	4c 19       	sub	r20, r12
     4da:	c5 0a       	sbc	r12, r21
     4dc:	3c 62       	ori	r19, 0x2C	; 44
     4de:	a7 62       	ori	r26, 0x27	; 39
     4e0:	52 71       	andi	r21, 0x12	; 18
     4e2:	4c 19       	sub	r20, r12
     4e4:	c6 09       	sbc	r28, r6
     4e6:	34 62       	ori	r19, 0x24	; 36
     4e8:	37 52       	subi	r19, 0x27	; 39
     4ea:	6b a8       	ldd	r6, Y+51	; 0x33
     4ec:	4a c7       	rjmp	.+3732   	; 0x1382 <u8g2_DrawLine+0x12>
     4ee:	0a 3c       	cpi	r16, 0xCA	; 202
     4f0:	5e a7       	std	Y+46, r21	; 0x2e
     4f2:	a2 2e       	mov	r10, r18
     4f4:	93 8c       	ldd	r9, Z+27	; 0x1b
     4f6:	00 c8       	rjmp	.-4096   	; 0xfffff4f8 <__eeprom_end+0xff7ef4f8>
     4f8:	0a 3c       	cpi	r16, 0xCA	; 202
     4fa:	62 97       	sbiw	r28, 0x12	; 18
     4fc:	51 1a       	sub	r5, r17
     4fe:	7a e5       	ldi	r23, 0x5A	; 90
     500:	11 c9       	rjmp	.-3550   	; 0xfffff724 <__eeprom_end+0xff7ef724>
     502:	09 3c       	cpi	r16, 0xC9	; 201
     504:	62 5b       	subi	r22, 0xB2	; 178
     506:	0e bd       	out	0x2e, r16	; 46
     508:	f2 08       	sbc	r15, r2
     50a:	ca 0a       	sbc	r12, r26
     50c:	3c 62       	ori	r19, 0x2C	; 44
     50e:	a7 e2       	ldi	r26, 0x27	; 39
     510:	d8 2b       	or	r29, r24
     512:	8f 00       	.word	0x008f	; ????
     514:	cb 0a       	sbc	r12, r27
     516:	3c 62       	ori	r19, 0x2C	; 44
     518:	13 33       	cpi	r17, 0x33	; 51
     51a:	1a 7a       	andi	r17, 0xAA	; 170
     51c:	e5 11       	cpse	r30, r5
     51e:	cc 09       	sbc	r28, r12
     520:	bb 62       	ori	r27, 0x2B	; 43
     522:	93 d3       	rcall	.+1830   	; 0xc4a <u8g2_font_decode_glyph+0x62>
     524:	8a d5       	rcall	.+2836   	; 0x103a <u8g2_UpdateRefHeight+0x1e>
     526:	00 cd       	rjmp	.-1536   	; 0xffffff28 <__eeprom_end+0xff7eff28>
     528:	09 bb       	out	0x19, r16	; 25
     52a:	62 9b       	sbis	0x0c, 2	; 12
     52c:	d2 8a       	std	Z+18, r13	; 0x12
     52e:	d5 00       	.word	0x00d5	; ????
     530:	ce 09       	sbc	r28, r14
     532:	bb 62       	ori	r27, 0x2B	; 43
     534:	57 8d       	ldd	r21, Z+31	; 0x1f
     536:	14 ab       	std	Z+52, r17	; 0x34
     538:	01 cf       	rjmp	.-510    	; 0x33c <__trampolines_end+0x2d4>
     53a:	09 bb       	out	0x19, r16	; 25
     53c:	62 93       	st	-Z, r22
     53e:	f2 8a       	std	Z+18, r15	; 0x12
     540:	d5 00       	.word	0x00d5	; ????
     542:	d0 0b       	sbc	r29, r16
     544:	35 62       	ori	r19, 0x25	; 37
     546:	37 e3       	ldi	r19, 0x37	; 55
     548:	48 65       	ori	r20, 0x58	; 88
     54a:	8a 69       	ori	r24, 0x9A	; 154
     54c:	01 d1       	rcall	.+514    	; 0x750 <.do_clear_bss_start+0x8>
     54e:	0a 3c       	cpi	r16, 0xCA	; 202
     550:	62 97       	sbiw	r28, 0x12	; 18
     552:	54 b9       	out	0x04, r21	; 4
     554:	d4 94       	.word	0x94d4	; ????
     556:	01 d2       	rcall	.+1026   	; 0x95a <__stack+0x5b>
     558:	0a 3c       	cpi	r16, 0xCA	; 202
     55a:	62 97       	sbiw	r28, 0x12	; 18
     55c:	51 54       	subi	r21, 0x41	; 65
     55e:	d1 4c       	sbci	r29, 0xC1	; 193
     560:	0a d3       	rcall	.+1556   	; 0xb76 <u8g2_font_decode_len+0x70>
     562:	09 3c       	cpi	r16, 0xC9	; 201
     564:	62 5b       	subi	r22, 0xB2	; 178
     566:	ab 68       	ori	r26, 0x8B	; 139
     568:	26 05       	cpc	r18, r6
     56a:	d4 0a       	sbc	r13, r20
     56c:	3c 62       	ori	r19, 0x2C	; 44
     56e:	a7 62       	ori	r26, 0x27	; 39
     570:	52 d1       	rcall	.+676    	; 0x816 <u8g2_ClearBuffer+0xa>
     572:	4c 0a       	sbc	r4, r28
     574:	d5 0a       	sbc	r13, r21
     576:	3c 62       	ori	r19, 0x2C	; 44
     578:	97 54       	subi	r25, 0x47	; 71
     57a:	54 d1       	rcall	.+680    	; 0x824 <u8g2_ClearBuffer+0x18>
     57c:	4c 0a       	sbc	r4, r28
     57e:	d6 0a       	sbc	r13, r22
     580:	3c 62       	ori	r19, 0x2C	; 44
     582:	13 33       	cpi	r17, 0x33	; 51
     584:	54 d1       	rcall	.+680    	; 0x82e <u8g2_ClearBuffer+0x22>
     586:	4c 0a       	sbc	r4, r28
     588:	d7 06       	cpc	r13, r23
     58a:	9b 62       	ori	r25, 0x2B	; 43
     58c:	93 3a       	cpi	r25, 0xA3	; 163
     58e:	d8 09       	sbc	r29, r8
     590:	34 62       	ori	r19, 0x24	; 36
     592:	37 d2       	rcall	.+1134   	; 0xa02 <u8g2_font_decode_get_unsigned_bits+0x34>
     594:	91 8e       	std	Z+25, r9	; 0x19
     596:	04 d9       	rcall	.-3576   	; 0xfffff7a0 <__eeprom_end+0xff7ef7a0>
     598:	09 3c       	cpi	r16, 0xC9	; 201
     59a:	62 97       	sbiw	r28, 0x12	; 18
     59c:	51 e9       	ldi	r21, 0x91	; 145
     59e:	4c 0a       	sbc	r4, r28
     5a0:	da 08       	sbc	r13, r10
     5a2:	3c 62       	ori	r19, 0x2C	; 44
     5a4:	db 74       	andi	r29, 0x4B	; 75
     5a6:	26 05       	cpc	r18, r6
     5a8:	db 09       	sbc	r29, r11
     5aa:	3c 62       	ori	r19, 0x2C	; 44
     5ac:	a7 a2       	std	Z+39, r10	; 0x27
     5ae:	67 52       	subi	r22, 0x27	; 39
     5b0:	00 dc       	rcall	.-2048   	; 0xfffffdb2 <__eeprom_end+0xff7efdb2>
     5b2:	0a 3c       	cpi	r16, 0xCA	; 202
     5b4:	62 13       	cpse	r22, r18
     5b6:	33 8a       	std	Z+19, r3	; 0x13
     5b8:	ce a4       	ldd	r12, Y+46	; 0x2e
     5ba:	00 dd       	rcall	.-1536   	; 0xffffffbc <__eeprom_end+0xff7effbc>
     5bc:	0b 3d       	cpi	r16, 0xDB	; 219
     5be:	62 5f       	subi	r22, 0xF2	; 242
     5c0:	e6 54       	subi	r30, 0x46	; 70
     5c2:	67 94       	ror	r6
     5c4:	51 04       	cpc	r5, r1
     5c6:	de 0a       	sbc	r13, r30
     5c8:	34 62       	ori	r19, 0x24	; 36
     5ca:	93 57       	subi	r25, 0x73	; 115
     5cc:	94 23       	and	r25, r20
     5ce:	65 00       	.word	0x0065	; ????
     5d0:	df 09       	sbc	r29, r15
     5d2:	34 62       	ori	r19, 0x24	; 36
     5d4:	a7 a2       	std	Z+39, r10	; 0x27
     5d6:	ea 54       	subi	r30, 0x4A	; 74
     5d8:	09 e0       	ldi	r16, 0x09	; 9
     5da:	0a 3c       	cpi	r16, 0xCA	; 202
     5dc:	62 97       	sbiw	r28, 0x12	; 18
     5de:	51 c6       	rjmp	.+3234   	; 0x1282 <u8g2_DrawHVLine+0x100>
     5e0:	23 ca       	rjmp	.-3002   	; 0xfffffa28 <__eeprom_end+0xff7efa28>
     5e2:	34 e1       	ldi	r19, 0x14	; 20
     5e4:	09 3c       	cpi	r16, 0xC9	; 201
     5e6:	62 5b       	subi	r22, 0xB2	; 178
     5e8:	53 23       	and	r21, r19
     5ea:	ca 34       	cpi	r28, 0x4A	; 74
     5ec:	e2 0a       	sbc	r14, r18
     5ee:	3c 62       	ori	r19, 0x2C	; 44
     5f0:	5b 65       	ori	r21, 0x5B	; 91
     5f2:	38 a2       	std	Y+32, r3	; 0x20
     5f4:	4c 03       	fmul	r20, r20
     5f6:	e3 0a       	sbc	r14, r19
     5f8:	3c 62       	ori	r19, 0x2C	; 44
     5fa:	97 54       	subi	r25, 0x47	; 71
     5fc:	c6 23       	and	r28, r22
     5fe:	ca 34       	cpi	r28, 0x4A	; 74
     600:	e4 09       	sbc	r30, r4
     602:	34 62       	ori	r19, 0x24	; 36
     604:	57 c3       	rjmp	.+1710   	; 0xcb4 <u8g2_font_decode_glyph+0xcc>
     606:	11 65       	ori	r17, 0x51	; 81
     608:	1a e5       	ldi	r17, 0x5A	; 90
     60a:	0a 3c       	cpi	r16, 0xCA	; 202
     60c:	62 a7       	std	Z+42, r22	; 0x2a
     60e:	62 92       	st	-Z, r6
     610:	23 ca       	rjmp	.-3002   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
     612:	34 e6       	ldi	r19, 0x64	; 100
     614:	09 25       	eor	r16, r9
     616:	62 33       	cpi	r22, 0x32	; 50
     618:	a2 32       	cpi	r26, 0x22	; 34
     61a:	47 00       	.word	0x0047	; ????
     61c:	e7 08       	sbc	r14, r7
     61e:	ab 5e       	subi	r26, 0xEB	; 235
     620:	37 b3       	in	r19, 0x17	; 23
     622:	4a 00       	.word	0x004a	; ????
     624:	e8 0b       	sbc	r30, r24
     626:	3c 62       	ori	r19, 0x2C	; 44
     628:	97 51       	subi	r25, 0x17	; 23
     62a:	c6 2a       	or	r12, r22
     62c:	8d ac       	ldd	r8, Y+61	; 0x3d
     62e:	00 e9       	ldi	r16, 0x90	; 144
     630:	0a 3c       	cpi	r16, 0xCA	; 202
     632:	62 5b       	subi	r22, 0xB2	; 178
     634:	53 2a       	or	r5, r19
     636:	8d ac       	ldd	r8, Y+61	; 0x3d
     638:	00 ea       	ldi	r16, 0xA0	; 160
     63a:	0b 3c       	cpi	r16, 0xCB	; 203
     63c:	62 a7       	std	Z+42, r22	; 0x2a
     63e:	62 86       	std	Z+10, r6	; 0x0a
     640:	2a 8d       	ldd	r18, Y+26	; 0x1a
     642:	ac 00       	.word	0x00ac	; ????
     644:	eb 0a       	sbc	r14, r27
     646:	34 62       	ori	r19, 0x24	; 36
     648:	57 43       	sbci	r21, 0x37	; 55
     64a:	95 46       	sbci	r25, 0x65	; 101
     64c:	56 00       	.word	0x0056	; ????
     64e:	ec 09       	sbc	r30, r12
     650:	bb 62       	ori	r27, 0x2B	; 43
     652:	93 33       	cpi	r25, 0x33	; 51
     654:	92 d5       	rcall	.+2852   	; 0x117a <u8g2_draw_hv_line_2dir+0x16>
     656:	00 ed       	ldi	r16, 0xD0	; 208
     658:	09 bb       	out	0x19, r16	; 25
     65a:	62 9b       	sbis	0x0c, 2	; 12
     65c:	32 92       	st	-Z, r3
     65e:	d5 00       	.word	0x00d5	; ????
     660:	ee 08       	sbc	r14, r14
     662:	bb 62       	ori	r27, 0x2B	; 43
     664:	d7 96       	adiw	r26, 0x37	; 55
     666:	d5 00       	.word	0x00d5	; ????
     668:	ef 08       	sbc	r14, r15
     66a:	b3 62       	ori	r27, 0x23	; 35
     66c:	93 b2       	in	r9, 0x13	; 19
     66e:	ac 06       	cpc	r10, r28
     670:	f0 0c       	add	r15, r0
     672:	3c 62       	ori	r19, 0x2C	; 44
     674:	93 62       	ori	r25, 0x23	; 35
     676:	95 51       	subi	r25, 0x15	; 21
     678:	1a 31       	cpi	r17, 0x1A	; 26
     67a:	29 00       	.word	0x0029	; ????
     67c:	f1 0a       	sbc	r15, r17
     67e:	3c 62       	ori	r19, 0x2C	; 44
     680:	97 54       	subi	r25, 0x47	; 71
     682:	86 2b       	or	r24, r22
     684:	9a 01       	movw	r18, r20
     686:	f2 0b       	sbc	r31, r18
     688:	3c 62       	ori	r19, 0x2C	; 44
     68a:	97 51       	subi	r25, 0x17	; 23
     68c:	c6 2a       	or	r12, r22
     68e:	ca a4       	ldd	r12, Y+42	; 0x2a
     690:	00 f3       	brcs	.-64     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     692:	0a 3c       	cpi	r16, 0xCA	; 202
     694:	62 5b       	subi	r22, 0xB2	; 178
     696:	53 2a       	or	r5, r19
     698:	ca a4       	ldd	r12, Y+42	; 0x2a
     69a:	00 f4       	brcc	.+0      	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     69c:	0b 3c       	cpi	r16, 0xCB	; 203
     69e:	62 a7       	std	Z+42, r22	; 0x2a
     6a0:	62 86       	std	Z+10, r6	; 0x0a
     6a2:	2a ca       	rjmp	.-2988   	; 0xfffffaf8 <__eeprom_end+0xff7efaf8>
     6a4:	a4 00       	.word	0x00a4	; ????
     6a6:	f5 0b       	sbc	r31, r21
     6a8:	3c 62       	ori	r19, 0x2C	; 44
     6aa:	97 54       	subi	r25, 0x47	; 71
     6ac:	c6 2a       	or	r12, r22
     6ae:	ca a4       	ldd	r12, Y+42	; 0x2a
     6b0:	00 f6       	brcc	.-128    	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     6b2:	0a 34       	cpi	r16, 0x4A	; 74
     6b4:	62 13       	cpse	r22, r18
     6b6:	33 54       	subi	r19, 0x43	; 67
     6b8:	51 26       	eor	r5, r17
     6ba:	05 f7       	brhc	.-64     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
     6bc:	08 ab       	std	Y+48, r16	; 0x30
     6be:	62 97       	sbiw	r28, 0x12	; 18
     6c0:	d1 46       	sbci	r29, 0x61	; 97
     6c2:	09 f8       	.word	0xf809	; ????
     6c4:	09 24       	eor	r0, r9
     6c6:	62 37       	cpi	r22, 0x72	; 114
     6c8:	d2 48       	sbci	r29, 0x82	; 130
     6ca:	23 01       	movw	r4, r6
     6cc:	f9 0a       	sbc	r15, r25
     6ce:	3c 62       	ori	r19, 0x2C	; 44
     6d0:	97 51       	subi	r25, 0x17	; 23
     6d2:	86 d1       	rcall	.+780    	; 0x9e0 <u8g2_font_decode_get_unsigned_bits+0x12>
     6d4:	4c 03       	fmul	r20, r20
     6d6:	fa 09       	sbc	r31, r10
     6d8:	3c 62       	ori	r19, 0x2C	; 44
     6da:	5b e3       	ldi	r21, 0x3B	; 59
     6dc:	68 a6       	std	Y+40, r6	; 0x28
     6de:	01 fb       	bst	r16, 1
     6e0:	0a 3c       	cpi	r16, 0xCA	; 202
     6e2:	62 a7       	std	Z+42, r22	; 0x2a
     6e4:	62 46       	sbci	r22, 0x62	; 98
     6e6:	d1 4c       	sbci	r29, 0xC1	; 193
     6e8:	03 fc       	sbrc	r0, 3
     6ea:	09 34       	cpi	r16, 0x49	; 73
     6ec:	62 13       	cpse	r22, r18
     6ee:	33 8a       	std	Z+19, r3	; 0x13
     6f0:	66 1a       	sub	r6, r22
     6f2:	fd 0b       	sbc	r31, r29
     6f4:	44 5e       	subi	r20, 0xE4	; 228
     6f6:	5b e3       	ldi	r21, 0x3B	; 59
     6f8:	28 d3       	rcall	.+1616   	; 0xd4a <u8g2_font_decode_glyph+0x162>
     6fa:	88 49       	sbci	r24, 0x98	; 152
     6fc:	01 fe       	sbrs	r0, 1
     6fe:	0a 3c       	cpi	r16, 0xCA	; 202
     700:	5e 93       	st	-X, r21
     702:	f3 8a       	std	Z+19, r15	; 0x13
     704:	23 e5       	ldi	r18, 0x53	; 83
     706:	0c ff       	.word	0xff0c	; ????
     708:	0c 3c       	cpi	r16, 0xCC	; 204
     70a:	5e 13       	cpse	r21, r30
     70c:	33 8a       	std	Z+19, r3	; 0x13
     70e:	32 8d       	ldd	r19, Z+26	; 0x1a
     710:	98 14       	cp	r9, r8
     712:	00 00       	nop
     714:	00 00       	nop
     716:	04 ff       	sbrs	r16, 4
     718:	ff 00       	.word	0x00ff	; ????
	...

0000071c <__ctors_end>:
     71c:	11 24       	eor	r1, r1
     71e:	1f be       	out	0x3f, r1	; 63
     720:	cf ef       	ldi	r28, 0xFF	; 255
     722:	d8 e0       	ldi	r29, 0x08	; 8
     724:	de bf       	out	0x3e, r29	; 62
     726:	cd bf       	out	0x3d, r28	; 61

00000728 <__do_copy_data>:
     728:	11 e0       	ldi	r17, 0x01	; 1
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	b1 e0       	ldi	r27, 0x01	; 1
     72e:	e6 e4       	ldi	r30, 0x46	; 70
     730:	f7 e2       	ldi	r31, 0x27	; 39
     732:	02 c0       	rjmp	.+4      	; 0x738 <__do_copy_data+0x10>
     734:	05 90       	lpm	r0, Z+
     736:	0d 92       	st	X+, r0
     738:	aa 39       	cpi	r26, 0x9A	; 154
     73a:	b1 07       	cpc	r27, r17
     73c:	d9 f7       	brne	.-10     	; 0x734 <__do_copy_data+0xc>

0000073e <__do_clear_bss>:
     73e:	26 e0       	ldi	r18, 0x06	; 6
     740:	aa e9       	ldi	r26, 0x9A	; 154
     742:	b1 e0       	ldi	r27, 0x01	; 1
     744:	01 c0       	rjmp	.+2      	; 0x748 <.do_clear_bss_start>

00000746 <.do_clear_bss_loop>:
     746:	1d 92       	st	X+, r1

00000748 <.do_clear_bss_start>:
     748:	a1 31       	cpi	r26, 0x11	; 17
     74a:	b2 07       	cpc	r27, r18
     74c:	e1 f7       	brne	.-8      	; 0x746 <.do_clear_bss_loop>
     74e:	0e 94 8e 10 	call	0x211c	; 0x211c <main>
     752:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <_exit>

00000756 <__bad_interrupt>:
     756:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000075a <adc_init>:

// Initialize ADC
void adc_init() 
{
	// Set reference voltage to AVCC, and select ADC3 as the default input channel
	ADMUX |= (1 << REFS0) | (1 << MUX0) | (1 << MUX1);
     75a:	ec e7       	ldi	r30, 0x7C	; 124
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	83 64       	ori	r24, 0x43	; 67
     762:	80 83       	st	Z, r24
	
	// Enable ADC, and set the prescaler to 128 (for example)
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     764:	ea e7       	ldi	r30, 0x7A	; 122
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	87 68       	ori	r24, 0x87	; 135
     76c:	80 83       	st	Z, r24
     76e:	08 95       	ret

00000770 <adc_read>:

// Perform ADC conversion and return the result
uint16_t adc_read() 
{
	// Start the conversion
	ADCSRA |= (1 << ADSC);
     770:	ea e7       	ldi	r30, 0x7A	; 122
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	80 64       	ori	r24, 0x40	; 64
     778:	80 83       	st	Z, r24

	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));
     77a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     77e:	86 fd       	sbrc	r24, 6
     780:	fc cf       	rjmp	.-8      	; 0x77a <adc_read+0xa>

	// Return the ADC result
	return ADC;
     782:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     786:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     78a:	08 95       	ret

0000078c <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     790:	dc 01       	movw	r26, r24
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	11 97       	sbiw	r26, 0x01	; 1
     798:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     79a:	92 96       	adiw	r26, 0x22	; 34
     79c:	0d 91       	ld	r16, X+
     79e:	1c 91       	ld	r17, X
     7a0:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     7a2:	62 9f       	mul	r22, r18
     7a4:	b0 01       	movw	r22, r0
     7a6:	11 24       	eor	r1, r1
  offset *= 8;
     7a8:	66 0f       	add	r22, r22
     7aa:	77 1f       	adc	r23, r23
     7ac:	66 0f       	add	r22, r22
     7ae:	77 1f       	adc	r23, r23
     7b0:	66 0f       	add	r22, r22
     7b2:	77 1f       	adc	r23, r23
  ptr += offset;
     7b4:	06 0f       	add	r16, r22
     7b6:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <u8x8_DrawTile>
}
     7be:	1f 91       	pop	r17
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     7d2:	dc 01       	movw	r26, r24
     7d4:	94 96       	adiw	r26, 0x24	; 36
     7d6:	fc 90       	ld	r15, X
     7d8:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     7da:	95 96       	adiw	r26, 0x25	; 37
     7dc:	dc 91       	ld	r29, X
     7de:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     7e0:	ed 91       	ld	r30, X+
     7e2:	fc 91       	ld	r31, X
     7e4:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     7e6:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     7e8:	4d 2f       	mov	r20, r29
     7ea:	6c 2f       	mov	r22, r28
     7ec:	c8 01       	movw	r24, r16
     7ee:	0e 94 c6 03 	call	0x78c	; 0x78c <u8g2_send_tile_row>
    src_row++;
     7f2:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     7f4:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     7f6:	cf 15       	cp	r28, r15
     7f8:	10 f4       	brcc	.+4      	; 0x7fe <u8g2_send_buffer+0x3a>
     7fa:	de 15       	cp	r29, r14
     7fc:	a8 f3       	brcs	.-22     	; 0x7e8 <u8g2_send_buffer+0x24>
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     80c:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     80e:	a0 81       	ld	r26, Z
     810:	b1 81       	ldd	r27, Z+1	; 0x01
     812:	50 96       	adiw	r26, 0x10	; 16
     814:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     816:	44 a1       	ldd	r20, Z+36	; 0x24
     818:	94 9f       	mul	r25, r20
     81a:	a0 01       	movw	r20, r0
     81c:	11 24       	eor	r1, r1
  cnt *= 8;
     81e:	44 0f       	add	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	44 0f       	add	r20, r20
     824:	55 1f       	adc	r21, r21
     826:	44 0f       	add	r20, r20
     828:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	82 a1       	ldd	r24, Z+34	; 0x22
     830:	93 a1       	ldd	r25, Z+35	; 0x23
     832:	0e 94 65 13 	call	0x26ca	; 0x26ca <memset>
     836:	08 95       	ret

00000838 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     83e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     842:	ce 01       	movw	r24, r28
     844:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <u8x8_RefreshDisplay>
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     84e:	28 e0       	ldi	r18, 0x08	; 8
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
  return buf;
  #endif
}
     854:	8a e9       	ldi	r24, 0x9A	; 154
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	08 95       	ret

0000085a <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	1f 92       	push	r1
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	7c 01       	movw	r14, r24
     872:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
     874:	89 01       	movw	r16, r18
     876:	9a 01       	movw	r18, r20
     878:	4b e8       	ldi	r20, 0x8B	; 139
     87a:	5c e0       	ldi	r21, 0x0C	; 12
     87c:	6c e1       	ldi	r22, 0x1C	; 28
     87e:	7e e0       	ldi	r23, 0x0E	; 14
     880:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	0e 94 27 04 	call	0x84e	; 0x84e <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     88c:	86 01       	movw	r16, r12
     88e:	24 e4       	ldi	r18, 0x44	; 68
     890:	3a e0       	ldi	r19, 0x0A	; 10
     892:	49 81       	ldd	r20, Y+1	; 0x01
     894:	bc 01       	movw	r22, r24
     896:	c7 01       	movw	r24, r14
     898:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8g2_SetupBuffer>
}
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	1f 91       	pop	r17
     8a4:	0f 91       	pop	r16
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	08 95       	ret

000008b0 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     8b0:	86 0f       	add	r24, r22
     8b2:	91 1d       	adc	r25, r1
     8b4:	fc 01       	movw	r30, r24
     8b6:	84 91       	lpm	r24, Z
     8b8:	08 95       	ret

000008ba <u8g2_font_get_word>:
     8ba:	fc 01       	movw	r30, r24
     8bc:	e6 0f       	add	r30, r22
     8be:	f1 1d       	adc	r31, r1
     8c0:	84 91       	lpm	r24, Z
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	98 2f       	mov	r25, r24
     8c8:	88 27       	eor	r24, r24
     8ca:	e4 91       	lpm	r30, Z
     8cc:	8e 0f       	add	r24, r30
     8ce:	91 1d       	adc	r25, r1
     8d0:	08 95       	ret

000008d2 <u8g2_font_calc_vref_font>:
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	08 95       	ret

000008d8 <u8g2_font_calc_vref_top>:
     8d8:	80 59       	subi	r24, 0x90	; 144
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	fc 01       	movw	r30, r24
     8de:	80 81       	ld	r24, Z
     8e0:	08 2e       	mov	r0, r24
     8e2:	00 0c       	add	r0, r0
     8e4:	99 0b       	sbc	r25, r25
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	08 95       	ret

000008ea <u8g2_read_font_info>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
     8f4:	8b 01       	movw	r16, r22
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	c8 01       	movw	r24, r16
     8fa:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     8fe:	88 83       	st	Y, r24
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	c8 01       	movw	r24, r16
     904:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	c8 01       	movw	r24, r16
     90e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     912:	8a 83       	std	Y+2, r24	; 0x02
     914:	63 e0       	ldi	r22, 0x03	; 3
     916:	c8 01       	movw	r24, r16
     918:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     91c:	8b 83       	std	Y+3, r24	; 0x03
     91e:	64 e0       	ldi	r22, 0x04	; 4
     920:	c8 01       	movw	r24, r16
     922:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     926:	8c 83       	std	Y+4, r24	; 0x04
     928:	65 e0       	ldi	r22, 0x05	; 5
     92a:	c8 01       	movw	r24, r16
     92c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     930:	8d 83       	std	Y+5, r24	; 0x05
     932:	66 e0       	ldi	r22, 0x06	; 6
     934:	c8 01       	movw	r24, r16
     936:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     93a:	8e 83       	std	Y+6, r24	; 0x06
     93c:	67 e0       	ldi	r22, 0x07	; 7
     93e:	c8 01       	movw	r24, r16
     940:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     944:	8f 83       	std	Y+7, r24	; 0x07
     946:	68 e0       	ldi	r22, 0x08	; 8
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     94e:	88 87       	std	Y+8, r24	; 0x08
     950:	69 e0       	ldi	r22, 0x09	; 9
     952:	c8 01       	movw	r24, r16
     954:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     958:	89 87       	std	Y+9, r24	; 0x09
     95a:	6a e0       	ldi	r22, 0x0A	; 10
     95c:	c8 01       	movw	r24, r16
     95e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     962:	8a 87       	std	Y+10, r24	; 0x0a
     964:	6b e0       	ldi	r22, 0x0B	; 11
     966:	c8 01       	movw	r24, r16
     968:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     96c:	8b 87       	std	Y+11, r24	; 0x0b
     96e:	6c e0       	ldi	r22, 0x0C	; 12
     970:	c8 01       	movw	r24, r16
     972:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     976:	8c 87       	std	Y+12, r24	; 0x0c
     978:	6d e0       	ldi	r22, 0x0D	; 13
     97a:	c8 01       	movw	r24, r16
     97c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     980:	8d 87       	std	Y+13, r24	; 0x0d
     982:	6e e0       	ldi	r22, 0x0E	; 14
     984:	c8 01       	movw	r24, r16
     986:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     98a:	8e 87       	std	Y+14, r24	; 0x0e
     98c:	6f e0       	ldi	r22, 0x0F	; 15
     98e:	c8 01       	movw	r24, r16
     990:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     994:	8f 87       	std	Y+15, r24	; 0x0f
     996:	60 e1       	ldi	r22, 0x10	; 16
     998:	c8 01       	movw	r24, r16
     99a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_font_get_byte>
     99e:	88 8b       	std	Y+16, r24	; 0x10
     9a0:	61 e1       	ldi	r22, 0x11	; 17
     9a2:	c8 01       	movw	r24, r16
     9a4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <u8g2_font_get_word>
     9a8:	9a 8b       	std	Y+18, r25	; 0x12
     9aa:	89 8b       	std	Y+17, r24	; 0x11
     9ac:	63 e1       	ldi	r22, 0x13	; 19
     9ae:	c8 01       	movw	r24, r16
     9b0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <u8g2_font_get_word>
     9b4:	9c 8b       	std	Y+20, r25	; 0x14
     9b6:	8b 8b       	std	Y+19, r24	; 0x13
     9b8:	65 e1       	ldi	r22, 0x15	; 21
     9ba:	c8 01       	movw	r24, r16
     9bc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <u8g2_font_get_word>
     9c0:	9e 8b       	std	Y+22, r25	; 0x16
     9c2:	8d 8b       	std	Y+21, r24	; 0x15
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <u8g2_font_decode_get_unsigned_bits>:
     9ce:	dc 01       	movw	r26, r24
     9d0:	1a 96       	adiw	r26, 0x0a	; 10
     9d2:	4c 91       	ld	r20, X
     9d4:	1a 97       	sbiw	r26, 0x0a	; 10
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	11 97       	sbiw	r26, 0x01	; 1
     9dc:	24 91       	lpm	r18, Z
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	04 2e       	mov	r0, r20
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <u8g2_font_decode_get_unsigned_bits+0x1a>
     9e4:	35 95       	asr	r19
     9e6:	27 95       	ror	r18
     9e8:	0a 94       	dec	r0
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <u8g2_font_decode_get_unsigned_bits+0x16>
     9ec:	82 2f       	mov	r24, r18
     9ee:	94 2f       	mov	r25, r20
     9f0:	96 0f       	add	r25, r22
     9f2:	98 30       	cpi	r25, 0x08	; 8
     9f4:	80 f0       	brcs	.+32     	; 0xa16 <u8g2_font_decode_get_unsigned_bits+0x48>
     9f6:	88 e0       	ldi	r24, 0x08	; 8
     9f8:	84 1b       	sub	r24, r20
     9fa:	31 96       	adiw	r30, 0x01	; 1
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	fc 93       	st	X, r31
     a00:	ee 93       	st	-X, r30
     a02:	e4 91       	lpm	r30, Z
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <u8g2_font_decode_get_unsigned_bits+0x3e>
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	8a 95       	dec	r24
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <u8g2_font_decode_get_unsigned_bits+0x3a>
     a10:	8e 2f       	mov	r24, r30
     a12:	82 2b       	or	r24, r18
     a14:	98 50       	subi	r25, 0x08	; 8
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <u8g2_font_decode_get_unsigned_bits+0x52>
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	6a 95       	dec	r22
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <u8g2_font_decode_get_unsigned_bits+0x4e>
     a24:	21 50       	subi	r18, 0x01	; 1
     a26:	1a 96       	adiw	r26, 0x0a	; 10
     a28:	9c 93       	st	X, r25
     a2a:	82 23       	and	r24, r18
     a2c:	08 95       	ret

00000a2e <u8g2_font_setup_decode>:
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	ec 01       	movw	r28, r24
     a38:	8c 01       	movw	r16, r24
     a3a:	08 5b       	subi	r16, 0xB8	; 184
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	f8 01       	movw	r30, r16
     a40:	71 83       	std	Z+1, r23	; 0x01
     a42:	60 83       	st	Z, r22
     a44:	12 86       	std	Z+10, r1	; 0x0a
     a46:	73 96       	adiw	r30, 0x13	; 19
     a48:	60 81       	ld	r22, Z
     a4a:	c8 01       	movw	r24, r16
     a4c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     a50:	f8 01       	movw	r30, r16
     a52:	80 87       	std	Z+8, r24	; 0x08
     a54:	74 96       	adiw	r30, 0x14	; 20
     a56:	60 81       	ld	r22, Z
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     a5e:	f8 01       	movw	r30, r16
     a60:	81 87       	std	Z+9, r24	; 0x09
     a62:	bc 96       	adiw	r30, 0x2c	; 44
     a64:	80 81       	ld	r24, Z
     a66:	f8 01       	movw	r30, r16
     a68:	84 87       	std	Z+12, r24	; 0x0c
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	81 11       	cpse	r24, r1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	c8 5b       	subi	r28, 0xB8	; 184
     a72:	df 4f       	sbci	r29, 0xFF	; 255
     a74:	9d 87       	std	Y+13, r25	; 0x0d
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	08 95       	ret

00000a80 <u8g2_font_decode_get_signed_bits>:
     a80:	cf 93       	push	r28
     a82:	c6 2f       	mov	r28, r22
     a84:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     a88:	c1 50       	subi	r28, 0x01	; 1
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <u8g2_font_decode_get_signed_bits+0x14>
     a90:	22 0f       	add	r18, r18
     a92:	33 1f       	adc	r19, r19
     a94:	ca 95       	dec	r28
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <u8g2_font_decode_get_signed_bits+0x10>
     a98:	82 1b       	sub	r24, r18
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <u8g2_add_vector_y>:
     a9e:	21 30       	cpi	r18, 0x01	; 1
     aa0:	49 f0       	breq	.+18     	; 0xab4 <u8g2_add_vector_y+0x16>
     aa2:	18 f0       	brcs	.+6      	; 0xaaa <u8g2_add_vector_y+0xc>
     aa4:	22 30       	cpi	r18, 0x02	; 2
     aa6:	59 f0       	breq	.+22     	; 0xabe <u8g2_add_vector_y+0x20>
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <u8g2_add_vector_y+0x2a>
     aaa:	84 0f       	add	r24, r20
     aac:	91 1d       	adc	r25, r1
     aae:	47 fd       	sbrc	r20, 7
     ab0:	9a 95       	dec	r25
     ab2:	08 95       	ret
     ab4:	86 0f       	add	r24, r22
     ab6:	91 1d       	adc	r25, r1
     ab8:	67 fd       	sbrc	r22, 7
     aba:	9a 95       	dec	r25
     abc:	08 95       	ret
     abe:	84 1b       	sub	r24, r20
     ac0:	91 09       	sbc	r25, r1
     ac2:	47 fd       	sbrc	r20, 7
     ac4:	93 95       	inc	r25
     ac6:	08 95       	ret
     ac8:	86 1b       	sub	r24, r22
     aca:	91 09       	sbc	r25, r1
     acc:	67 fd       	sbrc	r22, 7
     ace:	93 95       	inc	r25
     ad0:	08 95       	ret

00000ad2 <u8g2_add_vector_x>:
     ad2:	21 30       	cpi	r18, 0x01	; 1
     ad4:	49 f0       	breq	.+18     	; 0xae8 <u8g2_add_vector_x+0x16>
     ad6:	18 f0       	brcs	.+6      	; 0xade <u8g2_add_vector_x+0xc>
     ad8:	22 30       	cpi	r18, 0x02	; 2
     ada:	59 f0       	breq	.+22     	; 0xaf2 <u8g2_add_vector_x+0x20>
     adc:	0f c0       	rjmp	.+30     	; 0xafc <u8g2_add_vector_x+0x2a>
     ade:	86 0f       	add	r24, r22
     ae0:	91 1d       	adc	r25, r1
     ae2:	67 fd       	sbrc	r22, 7
     ae4:	9a 95       	dec	r25
     ae6:	08 95       	ret
     ae8:	84 1b       	sub	r24, r20
     aea:	91 09       	sbc	r25, r1
     aec:	47 fd       	sbrc	r20, 7
     aee:	93 95       	inc	r25
     af0:	08 95       	ret
     af2:	86 1b       	sub	r24, r22
     af4:	91 09       	sbc	r25, r1
     af6:	67 fd       	sbrc	r22, 7
     af8:	93 95       	inc	r25
     afa:	08 95       	ret
     afc:	84 0f       	add	r24, r20
     afe:	91 1d       	adc	r25, r1
     b00:	47 fd       	sbrc	r20, 7
     b02:	9a 95       	dec	r25
     b04:	08 95       	ret

00000b06 <u8g2_font_decode_len>:
     b06:	6f 92       	push	r6
     b08:	7f 92       	push	r7
     b0a:	8f 92       	push	r8
     b0c:	9f 92       	push	r9
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	7c 01       	movw	r14, r24
     b24:	16 2f       	mov	r17, r22
     b26:	74 2e       	mov	r7, r20
     b28:	fc 01       	movw	r30, r24
     b2a:	e8 5b       	subi	r30, 0xB8	; 184
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	96 80       	ldd	r9, Z+6	; 0x06
     b30:	d7 81       	ldd	r29, Z+7	; 0x07
     b32:	f7 01       	movw	r30, r14
     b34:	e8 5b       	subi	r30, 0xB8	; 184
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	c0 85       	ldd	r28, Z+8	; 0x08
     b3a:	c9 19       	sub	r28, r9
     b3c:	1c 17       	cp	r17, r28
     b3e:	10 f0       	brcs	.+4      	; 0xb44 <u8g2_font_decode_len+0x3e>
     b40:	6c 2e       	mov	r6, r28
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <u8g2_font_decode_len+0x40>
     b44:	61 2e       	mov	r6, r17
     b46:	f7 01       	movw	r30, r14
     b48:	e8 5b       	subi	r30, 0xB8	; 184
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	c4 80       	ldd	r12, Z+4	; 0x04
     b4e:	d5 80       	ldd	r13, Z+5	; 0x05
     b50:	06 85       	ldd	r16, Z+14	; 0x0e
     b52:	8d 2e       	mov	r8, r29
     b54:	20 2f       	mov	r18, r16
     b56:	4d 2f       	mov	r20, r29
     b58:	69 2d       	mov	r22, r9
     b5a:	82 81       	ldd	r24, Z+2	; 0x02
     b5c:	93 81       	ldd	r25, Z+3	; 0x03
     b5e:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_add_vector_x>
     b62:	5c 01       	movw	r10, r24
     b64:	20 2f       	mov	r18, r16
     b66:	4d 2f       	mov	r20, r29
     b68:	69 2d       	mov	r22, r9
     b6a:	c6 01       	movw	r24, r12
     b6c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <u8g2_add_vector_y>
     b70:	77 20       	and	r7, r7
     b72:	71 f0       	breq	.+28     	; 0xb90 <u8g2_font_decode_len+0x8a>
     b74:	f7 01       	movw	r30, r14
     b76:	e8 5b       	subi	r30, 0xB8	; 184
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	24 85       	ldd	r18, Z+12	; 0x0c
     b7c:	bc 96       	adiw	r30, 0x2c	; 44
     b7e:	20 83       	st	Z, r18
     b80:	26 2d       	mov	r18, r6
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	ac 01       	movw	r20, r24
     b86:	b5 01       	movw	r22, r10
     b88:	c7 01       	movw	r24, r14
     b8a:	0e 94 c1 08 	call	0x1182	; 0x1182 <u8g2_DrawHVLine>
     b8e:	10 c0       	rjmp	.+32     	; 0xbb0 <u8g2_font_decode_len+0xaa>
     b90:	f7 01       	movw	r30, r14
     b92:	e8 5b       	subi	r30, 0xB8	; 184
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	23 85       	ldd	r18, Z+11	; 0x0b
     b98:	21 11       	cpse	r18, r1
     b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <u8g2_font_decode_len+0xaa>
     b9c:	25 85       	ldd	r18, Z+13	; 0x0d
     b9e:	bc 96       	adiw	r30, 0x2c	; 44
     ba0:	20 83       	st	Z, r18
     ba2:	26 2d       	mov	r18, r6
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	ac 01       	movw	r20, r24
     ba8:	b5 01       	movw	r22, r10
     baa:	c7 01       	movw	r24, r14
     bac:	0e 94 c1 08 	call	0x1182	; 0x1182 <u8g2_DrawHVLine>
     bb0:	1c 17       	cp	r17, r28
     bb2:	20 f0       	brcs	.+8      	; 0xbbc <u8g2_font_decode_len+0xb6>
     bb4:	1c 1b       	sub	r17, r28
     bb6:	df 5f       	subi	r29, 0xFF	; 255
     bb8:	91 2c       	mov	r9, r1
     bba:	bb cf       	rjmp	.-138    	; 0xb32 <u8g2_font_decode_len+0x2c>
     bbc:	61 2f       	mov	r22, r17
     bbe:	69 0d       	add	r22, r9
     bc0:	f7 01       	movw	r30, r14
     bc2:	e8 5b       	subi	r30, 0xB8	; 184
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	66 83       	std	Z+6, r22	; 0x06
     bc8:	87 82       	std	Z+7, r8	; 0x07
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	1f 91       	pop	r17
     bd0:	0f 91       	pop	r16
     bd2:	ff 90       	pop	r15
     bd4:	ef 90       	pop	r14
     bd6:	df 90       	pop	r13
     bd8:	cf 90       	pop	r12
     bda:	bf 90       	pop	r11
     bdc:	af 90       	pop	r10
     bde:	9f 90       	pop	r9
     be0:	8f 90       	pop	r8
     be2:	7f 90       	pop	r7
     be4:	6f 90       	pop	r6
     be6:	08 95       	ret

00000be8 <u8g2_font_decode_glyph>:
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	7c 01       	movw	r14, r24
     c08:	88 e4       	ldi	r24, 0x48	; 72
     c0a:	e8 0e       	add	r14, r24
     c0c:	f1 1c       	adc	r15, r1
     c0e:	ce 01       	movw	r24, r28
     c10:	0e 94 17 05 	call	0xa2e	; 0xa2e <u8g2_font_setup_decode>
     c14:	fe 01       	movw	r30, r28
     c16:	ef 5a       	subi	r30, 0xAF	; 175
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	c0 80       	ld	r12, Z
     c1c:	3c 96       	adiw	r30, 0x0c	; 12
     c1e:	60 81       	ld	r22, Z
     c20:	c7 01       	movw	r24, r14
     c22:	0e 94 40 05 	call	0xa80	; 0xa80 <u8g2_font_decode_get_signed_bits>
     c26:	78 2e       	mov	r7, r24
     c28:	fe 01       	movw	r30, r28
     c2a:	e2 5a       	subi	r30, 0xA2	; 162
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	60 81       	ld	r22, Z
     c30:	c7 01       	movw	r24, r14
     c32:	0e 94 40 05 	call	0xa80	; 0xa80 <u8g2_font_decode_get_signed_bits>
     c36:	18 2f       	mov	r17, r24
     c38:	fe 01       	movw	r30, r28
     c3a:	e1 5a       	subi	r30, 0xA1	; 161
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	c7 01       	movw	r24, r14
     c42:	0e 94 40 05 	call	0xa80	; 0xa80 <u8g2_font_decode_get_signed_bits>
     c46:	d8 2e       	mov	r13, r24
     c48:	f7 01       	movw	r30, r14
     c4a:	60 84       	ldd	r6, Z+8	; 0x08
     c4c:	16 14       	cp	r1, r6
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <u8g2_font_decode_glyph+0x6a>
     c50:	9b c0       	rjmp	.+310    	; 0xd88 <u8g2_font_decode_glyph+0x1a0>
     c52:	06 85       	ldd	r16, Z+14	; 0x0e
     c54:	1c 0d       	add	r17, r12
     c56:	11 95       	neg	r17
     c58:	20 2f       	mov	r18, r16
     c5a:	41 2f       	mov	r20, r17
     c5c:	67 2d       	mov	r22, r7
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	0e 94 69 05 	call	0xad2	; 0xad2 <u8g2_add_vector_x>
     c66:	5c 01       	movw	r10, r24
     c68:	f7 01       	movw	r30, r14
     c6a:	93 83       	std	Z+3, r25	; 0x03
     c6c:	82 83       	std	Z+2, r24	; 0x02
     c6e:	20 2f       	mov	r18, r16
     c70:	41 2f       	mov	r20, r17
     c72:	67 2d       	mov	r22, r7
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	0e 94 4f 05 	call	0xa9e	; 0xa9e <u8g2_add_vector_y>
     c7c:	f7 01       	movw	r30, r14
     c7e:	95 83       	std	Z+5, r25	; 0x05
     c80:	84 83       	std	Z+4, r24	; 0x04
     c82:	01 30       	cpi	r16, 0x01	; 1
     c84:	89 f0       	breq	.+34     	; 0xca8 <u8g2_font_decode_glyph+0xc0>
     c86:	28 f0       	brcs	.+10     	; 0xc92 <u8g2_font_decode_glyph+0xaa>
     c88:	02 30       	cpi	r16, 0x02	; 2
     c8a:	01 f1       	breq	.+64     	; 0xccc <u8g2_font_decode_glyph+0xe4>
     c8c:	03 30       	cpi	r16, 0x03	; 3
     c8e:	a1 f1       	breq	.+104    	; 0xcf8 <u8g2_font_decode_glyph+0x110>
     c90:	43 c0       	rjmp	.+134    	; 0xd18 <u8g2_font_decode_glyph+0x130>
     c92:	95 01       	movw	r18, r10
     c94:	26 0d       	add	r18, r6
     c96:	31 1d       	adc	r19, r1
     c98:	67 fc       	sbrc	r6, 7
     c9a:	3a 95       	dec	r19
     c9c:	8c 01       	movw	r16, r24
     c9e:	0c 0d       	add	r16, r12
     ca0:	11 1d       	adc	r17, r1
     ca2:	c7 fc       	sbrc	r12, 7
     ca4:	1a 95       	dec	r17
     ca6:	3a c0       	rjmp	.+116    	; 0xd1c <u8g2_font_decode_glyph+0x134>
     ca8:	a5 01       	movw	r20, r10
     caa:	4c 19       	sub	r20, r12
     cac:	51 09       	sbc	r21, r1
     cae:	c7 fc       	sbrc	r12, 7
     cb0:	53 95       	inc	r21
     cb2:	95 01       	movw	r18, r10
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	8c 01       	movw	r16, r24
     cba:	06 0d       	add	r16, r6
     cbc:	11 1d       	adc	r17, r1
     cbe:	67 fc       	sbrc	r6, 7
     cc0:	1a 95       	dec	r17
     cc2:	ba 01       	movw	r22, r20
     cc4:	6f 5f       	subi	r22, 0xFF	; 255
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	5b 01       	movw	r10, r22
     cca:	28 c0       	rjmp	.+80     	; 0xd1c <u8g2_font_decode_glyph+0x134>
     ccc:	a5 01       	movw	r20, r10
     cce:	46 19       	sub	r20, r6
     cd0:	51 09       	sbc	r21, r1
     cd2:	67 fc       	sbrc	r6, 7
     cd4:	53 95       	inc	r21
     cd6:	95 01       	movw	r18, r10
     cd8:	2f 5f       	subi	r18, 0xFF	; 255
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	bc 01       	movw	r22, r24
     cde:	6c 19       	sub	r22, r12
     ce0:	71 09       	sbc	r23, r1
     ce2:	c7 fc       	sbrc	r12, 7
     ce4:	73 95       	inc	r23
     ce6:	8c 01       	movw	r16, r24
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	cb 01       	movw	r24, r22
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	fa 01       	movw	r30, r20
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	5f 01       	movw	r10, r30
     cf6:	12 c0       	rjmp	.+36     	; 0xd1c <u8g2_font_decode_glyph+0x134>
     cf8:	95 01       	movw	r18, r10
     cfa:	2c 0d       	add	r18, r12
     cfc:	31 1d       	adc	r19, r1
     cfe:	c7 fc       	sbrc	r12, 7
     d00:	3a 95       	dec	r19
     d02:	ac 01       	movw	r20, r24
     d04:	46 19       	sub	r20, r6
     d06:	51 09       	sbc	r21, r1
     d08:	67 fc       	sbrc	r6, 7
     d0a:	53 95       	inc	r21
     d0c:	8c 01       	movw	r16, r24
     d0e:	0f 5f       	subi	r16, 0xFF	; 255
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	ca 01       	movw	r24, r20
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <u8g2_font_decode_glyph+0x134>
     d18:	8c 01       	movw	r16, r24
     d1a:	95 01       	movw	r18, r10
     d1c:	ac 01       	movw	r20, r24
     d1e:	b5 01       	movw	r22, r10
     d20:	ce 01       	movw	r24, r28
     d22:	0e 94 93 09 	call	0x1326	; 0x1326 <u8g2_IsIntersection>
     d26:	88 23       	and	r24, r24
     d28:	79 f1       	breq	.+94     	; 0xd88 <u8g2_font_decode_glyph+0x1a0>
     d2a:	fe 01       	movw	r30, r28
     d2c:	e8 5b       	subi	r30, 0xB8	; 184
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	16 82       	std	Z+6, r1	; 0x06
     d32:	17 82       	std	Z+7, r1	; 0x07
     d34:	fe 01       	movw	r30, r28
     d36:	e7 5a       	subi	r30, 0xA7	; 167
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	60 81       	ld	r22, Z
     d3c:	c7 01       	movw	r24, r14
     d3e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     d42:	08 2f       	mov	r16, r24
     d44:	fe 01       	movw	r30, r28
     d46:	e6 5a       	subi	r30, 0xA6	; 166
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	60 81       	ld	r22, Z
     d4c:	c7 01       	movw	r24, r14
     d4e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     d52:	18 2f       	mov	r17, r24
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	60 2f       	mov	r22, r16
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 83 05 	call	0xb06	; 0xb06 <u8g2_font_decode_len>
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	61 2f       	mov	r22, r17
     d62:	ce 01       	movw	r24, r28
     d64:	0e 94 83 05 	call	0xb06	; 0xb06 <u8g2_font_decode_len>
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	c7 01       	movw	r24, r14
     d6c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <u8g2_font_decode_get_unsigned_bits>
     d70:	81 11       	cpse	r24, r1
     d72:	f0 cf       	rjmp	.-32     	; 0xd54 <u8g2_font_decode_glyph+0x16c>
     d74:	fe 01       	movw	r30, r28
     d76:	e8 5b       	subi	r30, 0xB8	; 184
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	87 81       	ldd	r24, Z+7	; 0x07
     d7c:	8c 15       	cp	r24, r12
     d7e:	d4 f2       	brlt	.-76     	; 0xd34 <u8g2_font_decode_glyph+0x14c>
     d80:	84 85       	ldd	r24, Z+12	; 0x0c
     d82:	cc 58       	subi	r28, 0x8C	; 140
     d84:	df 4f       	sbci	r29, 0xFF	; 255
     d86:	88 83       	st	Y, r24
     d88:	8d 2d       	mov	r24, r13
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	7f 90       	pop	r7
     da4:	6f 90       	pop	r6
     da6:	08 95       	ret

00000da8 <u8g2_font_get_glyph_data>:
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	fc 01       	movw	r30, r24
     db6:	ec 5b       	subi	r30, 0xBC	; 188
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	c0 81       	ld	r28, Z
     dbc:	d1 81       	ldd	r29, Z+1	; 0x01
     dbe:	67 96       	adiw	r28, 0x17	; 23
     dc0:	6f 3f       	cpi	r22, 0xFF	; 255
     dc2:	71 05       	cpc	r23, r1
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <u8g2_font_get_glyph_data+0x20>
     dc6:	38 f5       	brcc	.+78     	; 0xe16 <u8g2_font_get_glyph_data+0x6e>
     dc8:	61 36       	cpi	r22, 0x61	; 97
     dca:	71 05       	cpc	r23, r1
     dcc:	30 f0       	brcs	.+12     	; 0xdda <u8g2_font_get_glyph_data+0x32>
     dce:	b6 96       	adiw	r30, 0x26	; 38
     dd0:	80 81       	ld	r24, Z
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	c8 0f       	add	r28, r24
     dd6:	d9 1f       	adc	r29, r25
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <u8g2_font_get_glyph_data+0x46>
     dda:	61 34       	cpi	r22, 0x41	; 65
     ddc:	71 05       	cpc	r23, r1
     dde:	38 f0       	brcs	.+14     	; 0xdee <u8g2_font_get_glyph_data+0x46>
     de0:	fc 01       	movw	r30, r24
     de2:	e8 59       	subi	r30, 0x98	; 152
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	c8 0f       	add	r28, r24
     dec:	d9 1f       	adc	r29, r25
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	fc 01       	movw	r30, r24
     df4:	24 91       	lpm	r18, Z
     df6:	22 23       	and	r18, r18
     df8:	09 f4       	brne	.+2      	; 0xdfc <u8g2_font_get_glyph_data+0x54>
     dfa:	3c c0       	rjmp	.+120    	; 0xe74 <u8g2_font_get_glyph_data+0xcc>
     dfc:	fe 01       	movw	r30, r28
     dfe:	24 91       	lpm	r18, Z
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	62 17       	cp	r22, r18
     e04:	73 07       	cpc	r23, r19
     e06:	11 f4       	brne	.+4      	; 0xe0c <u8g2_font_get_glyph_data+0x64>
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	39 c0       	rjmp	.+114    	; 0xe7e <u8g2_font_get_glyph_data+0xd6>
     e0c:	fc 01       	movw	r30, r24
     e0e:	84 91       	lpm	r24, Z
     e10:	c8 0f       	add	r28, r24
     e12:	d1 1d       	adc	r29, r1
     e14:	ec cf       	rjmp	.-40     	; 0xdee <u8g2_font_get_glyph_data+0x46>
     e16:	8b 01       	movw	r16, r22
     e18:	fc 01       	movw	r30, r24
     e1a:	e4 59       	subi	r30, 0x94	; 148
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	c8 0f       	add	r28, r24
     e24:	d9 1f       	adc	r29, r25
     e26:	7e 01       	movw	r14, r28
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	c7 01       	movw	r24, r14
     e2c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <u8g2_font_get_word>
     e30:	c8 0f       	add	r28, r24
     e32:	d9 1f       	adc	r29, r25
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	c7 01       	movw	r24, r14
     e38:	0e 94 5d 04 	call	0x8ba	; 0x8ba <u8g2_font_get_word>
     e3c:	f4 e0       	ldi	r31, 0x04	; 4
     e3e:	ef 0e       	add	r14, r31
     e40:	f1 1c       	adc	r15, r1
     e42:	80 17       	cp	r24, r16
     e44:	91 07       	cpc	r25, r17
     e46:	80 f3       	brcs	.-32     	; 0xe28 <u8g2_font_get_glyph_data+0x80>
     e48:	fe 01       	movw	r30, r28
     e4a:	84 91       	lpm	r24, Z
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	98 2f       	mov	r25, r24
     e50:	88 27       	eor	r24, r24
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	e4 91       	lpm	r30, Z
     e56:	8e 2b       	or	r24, r30
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	79 f0       	breq	.+30     	; 0xe7a <u8g2_font_get_glyph_data+0xd2>
     e5c:	08 17       	cp	r16, r24
     e5e:	19 07       	cpc	r17, r25
     e60:	19 f4       	brne	.+6      	; 0xe68 <u8g2_font_get_glyph_data+0xc0>
     e62:	ce 01       	movw	r24, r28
     e64:	03 96       	adiw	r24, 0x03	; 3
     e66:	0b c0       	rjmp	.+22     	; 0xe7e <u8g2_font_get_glyph_data+0xd6>
     e68:	fe 01       	movw	r30, r28
     e6a:	32 96       	adiw	r30, 0x02	; 2
     e6c:	e4 91       	lpm	r30, Z
     e6e:	ce 0f       	add	r28, r30
     e70:	d1 1d       	adc	r29, r1
     e72:	ea cf       	rjmp	.-44     	; 0xe48 <u8g2_font_get_glyph_data+0xa0>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <u8g2_font_get_glyph_data+0xd6>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	08 95       	ret

00000e8c <u8g2_font_draw_glyph>:
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	fc 01       	movw	r30, r24
     e94:	e6 5b       	subi	r30, 0xB6	; 182
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	71 83       	std	Z+1, r23	; 0x01
     e9a:	60 83       	st	Z, r22
     e9c:	32 96       	adiw	r30, 0x02	; 2
     e9e:	51 83       	std	Z+1, r21	; 0x01
     ea0:	40 83       	st	Z, r20
     ea2:	b9 01       	movw	r22, r18
     ea4:	0e 94 d4 06 	call	0xda8	; 0xda8 <u8g2_font_get_glyph_data>
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	41 f0       	breq	.+16     	; 0xebc <u8g2_font_draw_glyph+0x30>
     eac:	bc 01       	movw	r22, r24
     eae:	ce 01       	movw	r24, r28
     eb0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <u8g2_font_decode_glyph>
     eb4:	08 2e       	mov	r0, r24
     eb6:	00 0c       	add	r0, r0
     eb8:	99 0b       	sbc	r25, r25
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <u8g2_font_draw_glyph+0x34>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <u8g2_DrawGlyph>:
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	8b 01       	movw	r16, r22
     eda:	7a 01       	movw	r14, r20
     edc:	69 01       	movw	r12, r18
     ede:	fc 01       	movw	r30, r24
     ee0:	ea 5a       	subi	r30, 0xAA	; 170
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	89 f0       	breq	.+34     	; 0xf0c <u8g2_DrawGlyph+0x46>
     eea:	28 f0       	brcs	.+10     	; 0xef6 <u8g2_DrawGlyph+0x30>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	c9 f0       	breq	.+50     	; 0xf22 <u8g2_DrawGlyph+0x5c>
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	11 f1       	breq	.+68     	; 0xf38 <u8g2_DrawGlyph+0x72>
     ef4:	2b c0       	rjmp	.+86     	; 0xf4c <u8g2_DrawGlyph+0x86>
     ef6:	fe 01       	movw	r30, r28
     ef8:	ea 5b       	subi	r30, 0xBA	; 186
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	01 90       	ld	r0, Z+
     efe:	f0 81       	ld	r31, Z
     f00:	e0 2d       	mov	r30, r0
     f02:	ce 01       	movw	r24, r28
     f04:	09 95       	icall
     f06:	e8 0e       	add	r14, r24
     f08:	f9 1e       	adc	r15, r25
     f0a:	20 c0       	rjmp	.+64     	; 0xf4c <u8g2_DrawGlyph+0x86>
     f0c:	fe 01       	movw	r30, r28
     f0e:	ea 5b       	subi	r30, 0xBA	; 186
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	01 90       	ld	r0, Z+
     f14:	f0 81       	ld	r31, Z
     f16:	e0 2d       	mov	r30, r0
     f18:	ce 01       	movw	r24, r28
     f1a:	09 95       	icall
     f1c:	08 1b       	sub	r16, r24
     f1e:	19 0b       	sbc	r17, r25
     f20:	15 c0       	rjmp	.+42     	; 0xf4c <u8g2_DrawGlyph+0x86>
     f22:	fe 01       	movw	r30, r28
     f24:	ea 5b       	subi	r30, 0xBA	; 186
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	01 90       	ld	r0, Z+
     f2a:	f0 81       	ld	r31, Z
     f2c:	e0 2d       	mov	r30, r0
     f2e:	ce 01       	movw	r24, r28
     f30:	09 95       	icall
     f32:	e8 1a       	sub	r14, r24
     f34:	f9 0a       	sbc	r15, r25
     f36:	0a c0       	rjmp	.+20     	; 0xf4c <u8g2_DrawGlyph+0x86>
     f38:	fe 01       	movw	r30, r28
     f3a:	ea 5b       	subi	r30, 0xBA	; 186
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	01 90       	ld	r0, Z+
     f40:	f0 81       	ld	r31, Z
     f42:	e0 2d       	mov	r30, r0
     f44:	ce 01       	movw	r24, r28
     f46:	09 95       	icall
     f48:	08 0f       	add	r16, r24
     f4a:	19 1f       	adc	r17, r25
     f4c:	96 01       	movw	r18, r12
     f4e:	a7 01       	movw	r20, r14
     f50:	b8 01       	movw	r22, r16
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 46 07 	call	0xe8c	; 0xe8c <u8g2_font_draw_glyph>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	df 90       	pop	r13
     f66:	cf 90       	pop	r12
     f68:	08 95       	ret

00000f6a <u8g2_draw_string>:
     f6a:	af 92       	push	r10
     f6c:	bf 92       	push	r11
     f6e:	cf 92       	push	r12
     f70:	df 92       	push	r13
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	5b 01       	movw	r10, r22
     f82:	6a 01       	movw	r12, r20
     f84:	89 01       	movw	r16, r18
     f86:	0e 94 b5 0b 	call	0x176a	; 0x176a <u8x8_utf8_init>
     f8a:	e1 2c       	mov	r14, r1
     f8c:	f1 2c       	mov	r15, r1
     f8e:	ea 81       	ldd	r30, Y+2	; 0x02
     f90:	fb 81       	ldd	r31, Y+3	; 0x03
     f92:	d8 01       	movw	r26, r16
     f94:	6c 91       	ld	r22, X
     f96:	ce 01       	movw	r24, r28
     f98:	09 95       	icall
     f9a:	8f 3f       	cpi	r24, 0xFF	; 255
     f9c:	bf ef       	ldi	r27, 0xFF	; 255
     f9e:	9b 07       	cpc	r25, r27
     fa0:	39 f1       	breq	.+78     	; 0xff0 <u8g2_draw_string+0x86>
     fa2:	0f 5f       	subi	r16, 0xFF	; 255
     fa4:	1f 4f       	sbci	r17, 0xFF	; 255
     fa6:	8e 3f       	cpi	r24, 0xFE	; 254
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	92 07       	cpc	r25, r18
     fac:	81 f3       	breq	.-32     	; 0xf8e <u8g2_draw_string+0x24>
     fae:	9c 01       	movw	r18, r24
     fb0:	a6 01       	movw	r20, r12
     fb2:	b5 01       	movw	r22, r10
     fb4:	ce 01       	movw	r24, r28
     fb6:	0e 94 63 07 	call	0xec6	; 0xec6 <u8g2_DrawGlyph>
     fba:	9c 01       	movw	r18, r24
     fbc:	fe 01       	movw	r30, r28
     fbe:	ea 5a       	subi	r30, 0xAA	; 170
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	90 81       	ld	r25, Z
     fc4:	91 30       	cpi	r25, 0x01	; 1
     fc6:	49 f0       	breq	.+18     	; 0xfda <u8g2_draw_string+0x70>
     fc8:	28 f0       	brcs	.+10     	; 0xfd4 <u8g2_draw_string+0x6a>
     fca:	92 30       	cpi	r25, 0x02	; 2
     fcc:	49 f0       	breq	.+18     	; 0xfe0 <u8g2_draw_string+0x76>
     fce:	93 30       	cpi	r25, 0x03	; 3
     fd0:	51 f0       	breq	.+20     	; 0xfe6 <u8g2_draw_string+0x7c>
     fd2:	0b c0       	rjmp	.+22     	; 0xfea <u8g2_draw_string+0x80>
     fd4:	a2 0e       	add	r10, r18
     fd6:	b3 1e       	adc	r11, r19
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <u8g2_draw_string+0x80>
     fda:	c2 0e       	add	r12, r18
     fdc:	d3 1e       	adc	r13, r19
     fde:	05 c0       	rjmp	.+10     	; 0xfea <u8g2_draw_string+0x80>
     fe0:	a2 1a       	sub	r10, r18
     fe2:	b3 0a       	sbc	r11, r19
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <u8g2_draw_string+0x80>
     fe6:	c2 1a       	sub	r12, r18
     fe8:	d3 0a       	sbc	r13, r19
     fea:	e2 0e       	add	r14, r18
     fec:	f3 1e       	adc	r15, r19
     fee:	cf cf       	rjmp	.-98     	; 0xf8e <u8g2_draw_string+0x24>
     ff0:	c7 01       	movw	r24, r14
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	08 95       	ret

00001008 <u8g2_DrawStr>:
    1008:	e8 ea       	ldi	r30, 0xA8	; 168
    100a:	fb e0       	ldi	r31, 0x0B	; 11
    100c:	dc 01       	movw	r26, r24
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	fc 93       	st	X, r31
    1012:	ee 93       	st	-X, r30
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	0e 94 b5 07 	call	0xf6a	; 0xf6a <u8g2_draw_string>
    101a:	08 95       	ret

0000101c <u8g2_UpdateRefHeight>:
    101c:	fc 01       	movw	r30, r24
    101e:	ec 5b       	subi	r30, 0xBC	; 188
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	20 81       	ld	r18, Z
    1024:	31 81       	ldd	r19, Z+1	; 0x01
    1026:	23 2b       	or	r18, r19
    1028:	e1 f1       	breq	.+120    	; 0x10a2 <u8g2_UpdateRefHeight+0x86>
    102a:	b0 96       	adiw	r30, 0x20	; 32
    102c:	20 81       	ld	r18, Z
    102e:	3c 96       	adiw	r30, 0x0c	; 12
    1030:	20 83       	st	Z, r18
    1032:	3b 97       	sbiw	r30, 0x0b	; 11
    1034:	40 81       	ld	r20, Z
    1036:	3c 96       	adiw	r30, 0x0c	; 12
    1038:	40 83       	st	Z, r20
    103a:	32 97       	sbiw	r30, 0x02	; 2
    103c:	30 81       	ld	r19, Z
    103e:	33 23       	and	r19, r19
    1040:	81 f1       	breq	.+96     	; 0x10a2 <u8g2_UpdateRefHeight+0x86>
    1042:	31 30       	cpi	r19, 0x01	; 1
    1044:	79 f4       	brne	.+30     	; 0x1064 <u8g2_UpdateRefHeight+0x48>
    1046:	39 97       	sbiw	r30, 0x09	; 9
    1048:	30 81       	ld	r19, Z
    104a:	23 17       	cp	r18, r19
    104c:	14 f4       	brge	.+4      	; 0x1052 <u8g2_UpdateRefHeight+0x36>
    104e:	3a 96       	adiw	r30, 0x0a	; 10
    1050:	30 83       	st	Z, r19
    1052:	fc 01       	movw	r30, r24
    1054:	e9 59       	subi	r30, 0x99	; 153
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	20 81       	ld	r18, Z
    105a:	24 17       	cp	r18, r20
    105c:	14 f5       	brge	.+68     	; 0x10a2 <u8g2_UpdateRefHeight+0x86>
    105e:	3a 96       	adiw	r30, 0x0a	; 10
    1060:	20 83       	st	Z, r18
    1062:	08 95       	ret
    1064:	02 2e       	mov	r0, r18
    1066:	00 0c       	add	r0, r0
    1068:	33 0b       	sbc	r19, r19
    106a:	fc 01       	movw	r30, r24
    106c:	ef 59       	subi	r30, 0x9F	; 159
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	e0 81       	ld	r30, Z
    1072:	dc 01       	movw	r26, r24
    1074:	ad 59       	subi	r26, 0x9D	; 157
    1076:	bf 4f       	sbci	r27, 0xFF	; 255
    1078:	5c 91       	ld	r21, X
    107a:	65 2f       	mov	r22, r21
    107c:	05 2e       	mov	r0, r21
    107e:	00 0c       	add	r0, r0
    1080:	77 0b       	sbc	r23, r23
    1082:	6e 0f       	add	r22, r30
    1084:	71 1d       	adc	r23, r1
    1086:	e7 fd       	sbrc	r30, 7
    1088:	7a 95       	dec	r23
    108a:	26 17       	cp	r18, r22
    108c:	37 07       	cpc	r19, r23
    108e:	1c f4       	brge	.+6      	; 0x1096 <u8g2_UpdateRefHeight+0x7a>
    1090:	1d 96       	adiw	r26, 0x0d	; 13
    1092:	e5 0f       	add	r30, r21
    1094:	ec 93       	st	X, r30
    1096:	54 17       	cp	r21, r20
    1098:	24 f4       	brge	.+8      	; 0x10a2 <u8g2_UpdateRefHeight+0x86>
    109a:	fc 01       	movw	r30, r24
    109c:	ef 58       	subi	r30, 0x8F	; 143
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	50 83       	st	Z, r21
    10a2:	08 95       	ret

000010a4 <u8g2_SetFontRefHeightText>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	e1 59       	subi	r30, 0x91	; 145
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	10 82       	st	Z, r1
    10ac:	0e 94 0e 08 	call	0x101c	; 0x101c <u8g2_UpdateRefHeight>
    10b0:	08 95       	ret

000010b2 <u8g2_SetFontPosBaseline>:
    10b2:	8a 5b       	subi	r24, 0xBA	; 186
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	29 e6       	ldi	r18, 0x69	; 105
    10b8:	34 e0       	ldi	r19, 0x04	; 4
    10ba:	fc 01       	movw	r30, r24
    10bc:	31 83       	std	Z+1, r19	; 0x01
    10be:	20 83       	st	Z, r18
    10c0:	08 95       	ret

000010c2 <u8g2_SetFontPosTop>:
    10c2:	8a 5b       	subi	r24, 0xBA	; 186
    10c4:	9f 4f       	sbci	r25, 0xFF	; 255
    10c6:	2c e6       	ldi	r18, 0x6C	; 108
    10c8:	34 e0       	ldi	r19, 0x04	; 4
    10ca:	fc 01       	movw	r30, r24
    10cc:	31 83       	std	Z+1, r19	; 0x01
    10ce:	20 83       	st	Z, r18
    10d0:	08 95       	ret

000010d2 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
  if ( u8g2->font != font )
    10d6:	fc 01       	movw	r30, r24
    10d8:	ec 5b       	subi	r30, 0xBC	; 188
    10da:	ff 4f       	sbci	r31, 0xFF	; 255
    10dc:	20 81       	ld	r18, Z
    10de:	31 81       	ldd	r19, Z+1	; 0x01
    10e0:	26 17       	cp	r18, r22
    10e2:	37 07       	cpc	r19, r23
    10e4:	51 f0       	breq	.+20     	; 0x10fa <u8g2_SetFont+0x28>
    10e6:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    10e8:	71 83       	std	Z+1, r23	; 0x01
    10ea:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    10ec:	89 5a       	subi	r24, 0xA9	; 169
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	0e 94 75 04 	call	0x8ea	; 0x8ea <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 0e 08 	call	0x101c	; 0x101c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <u8g2_clip_intersection2>:
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
    1106:	a8 81       	ld	r26, Y
    1108:	b9 81       	ldd	r27, Y+1	; 0x01
    110a:	eb 01       	movw	r28, r22
    110c:	e8 81       	ld	r30, Y
    110e:	f9 81       	ldd	r31, Y+1	; 0x01
    1110:	ea 0f       	add	r30, r26
    1112:	fb 1f       	adc	r31, r27
    1114:	ea 17       	cp	r30, r26
    1116:	fb 07       	cpc	r31, r27
    1118:	38 f4       	brcc	.+14     	; 0x1128 <u8g2_clip_intersection2+0x28>
    111a:	a2 17       	cp	r26, r18
    111c:	b3 07       	cpc	r27, r19
    111e:	18 f4       	brcc	.+6      	; 0x1126 <u8g2_clip_intersection2+0x26>
    1120:	f9 01       	movw	r30, r18
    1122:	31 97       	sbiw	r30, 0x01	; 1
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <u8g2_clip_intersection2+0x28>
    1126:	da 01       	movw	r26, r20
    1128:	a2 17       	cp	r26, r18
    112a:	b3 07       	cpc	r27, r19
    112c:	a8 f4       	brcc	.+42     	; 0x1158 <u8g2_clip_intersection2+0x58>
    112e:	4e 17       	cp	r20, r30
    1130:	5f 07       	cpc	r21, r31
    1132:	a0 f4       	brcc	.+40     	; 0x115c <u8g2_clip_intersection2+0x5c>
    1134:	a4 17       	cp	r26, r20
    1136:	b5 07       	cpc	r27, r21
    1138:	08 f0       	brcs	.+2      	; 0x113c <u8g2_clip_intersection2+0x3c>
    113a:	ad 01       	movw	r20, r26
    113c:	2e 17       	cp	r18, r30
    113e:	3f 07       	cpc	r19, r31
    1140:	08 f0       	brcs	.+2      	; 0x1144 <u8g2_clip_intersection2+0x44>
    1142:	9f 01       	movw	r18, r30
    1144:	fc 01       	movw	r30, r24
    1146:	51 83       	std	Z+1, r21	; 0x01
    1148:	40 83       	st	Z, r20
    114a:	24 1b       	sub	r18, r20
    114c:	35 0b       	sbc	r19, r21
    114e:	eb 01       	movw	r28, r22
    1150:	39 83       	std	Y+1, r19	; 0x01
    1152:	28 83       	st	Y, r18
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	03 c0       	rjmp	.+6      	; 0x115e <u8g2_clip_intersection2+0x5e>
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	01 c0       	rjmp	.+2      	; 0x115e <u8g2_clip_intersection2+0x5e>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <u8g2_draw_hv_line_2dir>:
    1164:	0f 93       	push	r16
    1166:	dc 01       	movw	r26, r24
    1168:	9a 96       	adiw	r26, 0x2a	; 42
    116a:	ed 91       	ld	r30, X+
    116c:	fc 91       	ld	r31, X
    116e:	9b 97       	sbiw	r26, 0x2b	; 43
    1170:	4e 1b       	sub	r20, r30
    1172:	5f 0b       	sbc	r21, r31
    1174:	5e 96       	adiw	r26, 0x1e	; 30
    1176:	ed 91       	ld	r30, X+
    1178:	fc 91       	ld	r31, X
    117a:	5f 97       	sbiw	r26, 0x1f	; 31
    117c:	09 95       	icall
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <u8g2_DrawHVLine>:
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 d0       	rcall	.+0      	; 0x1190 <u8g2_DrawHVLine+0xe>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <u8g2_DrawHVLine+0x10>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <u8g2_DrawHVLine+0x12>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	7a 83       	std	Y+2, r23	; 0x02
    119a:	69 83       	std	Y+1, r22	; 0x01
    119c:	5c 83       	std	Y+4, r21	; 0x04
    119e:	4b 83       	std	Y+3, r20	; 0x03
    11a0:	3e 83       	std	Y+6, r19	; 0x06
    11a2:	2d 83       	std	Y+5, r18	; 0x05
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 59       	subi	r30, 0x92	; 146
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	20 81       	ld	r18, Z
    11ac:	22 23       	and	r18, r18
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <u8g2_DrawHVLine+0x30>
    11b0:	74 c0       	rjmp	.+232    	; 0x129a <u8g2_DrawHVLine+0x118>
    11b2:	2d 81       	ldd	r18, Y+5	; 0x05
    11b4:	3e 81       	ldd	r19, Y+6	; 0x06
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <u8g2_DrawHVLine+0x3c>
    11bc:	6e c0       	rjmp	.+220    	; 0x129a <u8g2_DrawHVLine+0x118>
    11be:	22 30       	cpi	r18, 0x02	; 2
    11c0:	31 05       	cpc	r19, r1
    11c2:	b0 f0       	brcs	.+44     	; 0x11f0 <u8g2_DrawHVLine+0x6e>
    11c4:	02 30       	cpi	r16, 0x02	; 2
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <u8g2_DrawHVLine+0x56>
    11c8:	62 1b       	sub	r22, r18
    11ca:	73 0b       	sbc	r23, r19
    11cc:	9b 01       	movw	r18, r22
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	3a 83       	std	Y+2, r19	; 0x02
    11d4:	29 83       	std	Y+1, r18	; 0x01
    11d6:	0c c0       	rjmp	.+24     	; 0x11f0 <u8g2_DrawHVLine+0x6e>
    11d8:	03 30       	cpi	r16, 0x03	; 3
    11da:	51 f4       	brne	.+20     	; 0x11f0 <u8g2_DrawHVLine+0x6e>
    11dc:	4b 81       	ldd	r20, Y+3	; 0x03
    11de:	5c 81       	ldd	r21, Y+4	; 0x04
    11e0:	da 01       	movw	r26, r20
    11e2:	a2 1b       	sub	r26, r18
    11e4:	b3 0b       	sbc	r27, r19
    11e6:	9d 01       	movw	r18, r26
    11e8:	2f 5f       	subi	r18, 0xFF	; 255
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	7c 01       	movw	r14, r24
    11f2:	10 2f       	mov	r17, r16
    11f4:	11 70       	andi	r17, 0x01	; 1
    11f6:	00 fd       	sbrc	r16, 0
    11f8:	1d c0       	rjmp	.+58     	; 0x1234 <u8g2_DrawHVLine+0xb2>
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 ad       	ldd	r18, Z+56	; 0x38
    11fe:	31 ad       	ldd	r19, Z+57	; 0x39
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	82 17       	cp	r24, r18
    1206:	93 07       	cpc	r25, r19
    1208:	08 f4       	brcc	.+2      	; 0x120c <u8g2_DrawHVLine+0x8a>
    120a:	47 c0       	rjmp	.+142    	; 0x129a <u8g2_DrawHVLine+0x118>
    120c:	22 ad       	ldd	r18, Z+58	; 0x3a
    120e:	33 ad       	ldd	r19, Z+59	; 0x3b
    1210:	82 17       	cp	r24, r18
    1212:	93 07       	cpc	r25, r19
    1214:	08 f0       	brcs	.+2      	; 0x1218 <u8g2_DrawHVLine+0x96>
    1216:	41 c0       	rjmp	.+130    	; 0x129a <u8g2_DrawHVLine+0x118>
    1218:	26 a9       	ldd	r18, Z+54	; 0x36
    121a:	37 a9       	ldd	r19, Z+55	; 0x37
    121c:	44 a9       	ldd	r20, Z+52	; 0x34
    121e:	55 a9       	ldd	r21, Z+53	; 0x35
    1220:	be 01       	movw	r22, r28
    1222:	6b 5f       	subi	r22, 0xFB	; 251
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	ce 01       	movw	r24, r28
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	0e 94 80 08 	call	0x1100	; 0x1100 <u8g2_clip_intersection2>
    122e:	81 11       	cpse	r24, r1
    1230:	23 c0       	rjmp	.+70     	; 0x1278 <u8g2_DrawHVLine+0xf6>
    1232:	33 c0       	rjmp	.+102    	; 0x129a <u8g2_DrawHVLine+0x118>
    1234:	dc 01       	movw	r26, r24
    1236:	d4 96       	adiw	r26, 0x34	; 52
    1238:	2d 91       	ld	r18, X+
    123a:	3c 91       	ld	r19, X
    123c:	d5 97       	sbiw	r26, 0x35	; 53
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	82 17       	cp	r24, r18
    1244:	93 07       	cpc	r25, r19
    1246:	48 f1       	brcs	.+82     	; 0x129a <u8g2_DrawHVLine+0x118>
    1248:	d6 96       	adiw	r26, 0x36	; 54
    124a:	2d 91       	ld	r18, X+
    124c:	3c 91       	ld	r19, X
    124e:	d7 97       	sbiw	r26, 0x37	; 55
    1250:	82 17       	cp	r24, r18
    1252:	93 07       	cpc	r25, r19
    1254:	10 f5       	brcc	.+68     	; 0x129a <u8g2_DrawHVLine+0x118>
    1256:	da 96       	adiw	r26, 0x3a	; 58
    1258:	2d 91       	ld	r18, X+
    125a:	3c 91       	ld	r19, X
    125c:	db 97       	sbiw	r26, 0x3b	; 59
    125e:	d8 96       	adiw	r26, 0x38	; 56
    1260:	4d 91       	ld	r20, X+
    1262:	5c 91       	ld	r21, X
    1264:	d9 97       	sbiw	r26, 0x39	; 57
    1266:	be 01       	movw	r22, r28
    1268:	6b 5f       	subi	r22, 0xFB	; 251
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	ce 01       	movw	r24, r28
    126e:	03 96       	adiw	r24, 0x03	; 3
    1270:	0e 94 80 08 	call	0x1100	; 0x1100 <u8g2_clip_intersection2>
    1274:	88 23       	and	r24, r24
    1276:	89 f0       	breq	.+34     	; 0x129a <u8g2_DrawHVLine+0x118>
    1278:	d7 01       	movw	r26, r14
    127a:	90 96       	adiw	r26, 0x20	; 32
    127c:	ed 91       	ld	r30, X+
    127e:	fc 91       	ld	r31, X
    1280:	91 97       	sbiw	r26, 0x21	; 33
    1282:	04 80       	ldd	r0, Z+4	; 0x04
    1284:	f5 81       	ldd	r31, Z+5	; 0x05
    1286:	e0 2d       	mov	r30, r0
    1288:	2d 81       	ldd	r18, Y+5	; 0x05
    128a:	3e 81       	ldd	r19, Y+6	; 0x06
    128c:	4b 81       	ldd	r20, Y+3	; 0x03
    128e:	5c 81       	ldd	r21, Y+4	; 0x04
    1290:	69 81       	ldd	r22, Y+1	; 0x01
    1292:	7a 81       	ldd	r23, Y+2	; 0x02
    1294:	01 2f       	mov	r16, r17
    1296:	c7 01       	movw	r24, r14
    1298:	09 95       	icall
    129a:	26 96       	adiw	r28, 0x06	; 6
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    12b4:	0f 93       	push	r16
    12b6:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    12b8:	80 ad       	ldd	r24, Z+56	; 0x38
    12ba:	91 ad       	ldd	r25, Z+57	; 0x39
    12bc:	48 17       	cp	r20, r24
    12be:	59 07       	cpc	r21, r25
    12c0:	a8 f0       	brcs	.+42     	; 0x12ec <u8g2_DrawPixel+0x38>
    return;
  if ( y >= u8g2->user_y1 )
    12c2:	82 ad       	ldd	r24, Z+58	; 0x3a
    12c4:	93 ad       	ldd	r25, Z+59	; 0x3b
    12c6:	48 17       	cp	r20, r24
    12c8:	59 07       	cpc	r21, r25
    12ca:	80 f4       	brcc	.+32     	; 0x12ec <u8g2_DrawPixel+0x38>
    return;
  if ( x < u8g2->user_x0 )
    12cc:	84 a9       	ldd	r24, Z+52	; 0x34
    12ce:	95 a9       	ldd	r25, Z+53	; 0x35
    12d0:	68 17       	cp	r22, r24
    12d2:	79 07       	cpc	r23, r25
    12d4:	58 f0       	brcs	.+22     	; 0x12ec <u8g2_DrawPixel+0x38>
    return;
  if ( x >= u8g2->user_x1 )
    12d6:	86 a9       	ldd	r24, Z+54	; 0x36
    12d8:	97 a9       	ldd	r25, Z+55	; 0x37
    12da:	68 17       	cp	r22, r24
    12dc:	79 07       	cpc	r23, r25
    12de:	30 f4       	brcc	.+12     	; 0x12ec <u8g2_DrawPixel+0x38>
    12e0:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    12e2:	00 e0       	ldi	r16, 0x00	; 0
    12e4:	21 e0       	ldi	r18, 0x01	; 1
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	0e 94 c1 08 	call	0x1182	; 0x1182 <u8g2_DrawHVLine>
}
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    12f0:	46 17       	cp	r20, r22
    12f2:	57 07       	cpc	r21, r23
    12f4:	40 f4       	brcc	.+16     	; 0x1306 <u8g2_is_intersection_decision_tree+0x16>
  {
    if ( v1 > a0 )	// v1 >= a0
    12f6:	82 17       	cp	r24, r18
    12f8:	93 07       	cpc	r25, r19
    12fa:	68 f0       	brcs	.+26     	; 0x1316 <u8g2_is_intersection_decision_tree+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    12fc:	24 17       	cp	r18, r20
    12fe:	35 07       	cpc	r19, r21
    1300:	60 f4       	brcc	.+24     	; 0x131a <u8g2_is_intersection_decision_tree+0x2a>
      {
	return 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1306:	82 17       	cp	r24, r18
    1308:	93 07       	cpc	r25, r19
    130a:	48 f4       	brcc	.+18     	; 0x131e <u8g2_is_intersection_decision_tree+0x2e>
    {
      if ( v0 > v1 )	// v0 > v1
    130c:	24 17       	cp	r18, r20
    130e:	35 07       	cpc	r19, r21
    1310:	40 f4       	brcc	.+16     	; 0x1322 <u8g2_is_intersection_decision_tree+0x32>
      {
	return 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
    1322:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
    1324:	08 95       	ret

00001326 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	ec 01       	movw	r28, r24
    1338:	7b 01       	movw	r14, r22
    133a:	69 01       	movw	r12, r18
    133c:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    133e:	6a ad       	ldd	r22, Y+58	; 0x3a
    1340:	7b ad       	ldd	r23, Y+59	; 0x3b
    1342:	88 ad       	ldd	r24, Y+56	; 0x38
    1344:	99 ad       	ldd	r25, Y+57	; 0x39
    1346:	0e 94 78 09 	call	0x12f0	; 0x12f0 <u8g2_is_intersection_decision_tree>
    134a:	88 23       	and	r24, r24
    134c:	41 f0       	breq	.+16     	; 0x135e <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    134e:	6e a9       	ldd	r22, Y+54	; 0x36
    1350:	7f a9       	ldd	r23, Y+55	; 0x37
    1352:	96 01       	movw	r18, r12
    1354:	a7 01       	movw	r20, r14
    1356:	8c a9       	ldd	r24, Y+52	; 0x34
    1358:	9d a9       	ldd	r25, Y+53	; 0x35
    135a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <u8g2_is_intersection_decision_tree>
}
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	08 95       	ret

00001370 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    1370:	3f 92       	push	r3
    1372:	4f 92       	push	r4
    1374:	5f 92       	push	r5
    1376:	6f 92       	push	r6
    1378:	7f 92       	push	r7
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	3c 01       	movw	r6, r24
    1394:	eb 01       	movw	r28, r22
    1396:	6a 01       	movw	r12, r20
    1398:	59 01       	movw	r10, r18

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    139a:	26 17       	cp	r18, r22
    139c:	37 07       	cpc	r19, r23
    139e:	20 f4       	brcc	.+8      	; 0x13a8 <u8g2_DrawLine+0x38>
    13a0:	4b 01       	movw	r8, r22
    13a2:	82 1a       	sub	r8, r18
    13a4:	93 0a       	sbc	r9, r19
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <u8g2_DrawLine+0x3e>
    13a8:	49 01       	movw	r8, r18
    13aa:	86 1a       	sub	r8, r22
    13ac:	97 0a       	sbc	r9, r23
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    13ae:	0c 15       	cp	r16, r12
    13b0:	1d 05       	cpc	r17, r13
    13b2:	20 f4       	brcc	.+8      	; 0x13bc <u8g2_DrawLine+0x4c>
    13b4:	26 01       	movw	r4, r12
    13b6:	40 1a       	sub	r4, r16
    13b8:	51 0a       	sbc	r5, r17
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <u8g2_DrawLine+0x52>
    13bc:	28 01       	movw	r4, r16
    13be:	4c 18       	sub	r4, r12
    13c0:	5d 08       	sbc	r5, r13

  if ( dy > dx ) 
    13c2:	84 14       	cp	r8, r4
    13c4:	95 04       	cpc	r9, r5
    13c6:	38 f0       	brcs	.+14     	; 0x13d6 <u8g2_DrawLine+0x66>
    13c8:	94 2d       	mov	r25, r4
    13ca:	85 2d       	mov	r24, r5
    13cc:	24 01       	movw	r4, r8
    13ce:	89 2e       	mov	r8, r25
    13d0:	98 2e       	mov	r9, r24
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
    13d2:	31 2c       	mov	r3, r1
    13d4:	0c c0       	rjmp	.+24     	; 0x13ee <u8g2_DrawLine+0x7e>
    13d6:	9a 2d       	mov	r25, r10
    13d8:	8b 2d       	mov	r24, r11
  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    13da:	58 01       	movw	r10, r16
    13dc:	09 2f       	mov	r16, r25
    13de:	18 2f       	mov	r17, r24
    13e0:	9c 2f       	mov	r25, r28
    13e2:	8d 2f       	mov	r24, r29

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    13e4:	e6 01       	movw	r28, r12
    13e6:	c9 2e       	mov	r12, r25
    13e8:	d8 2e       	mov	r13, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    13ea:	33 24       	eor	r3, r3
    13ec:	33 94       	inc	r3
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    13ee:	ac 16       	cp	r10, r28
    13f0:	bd 06       	cpc	r11, r29
    13f2:	50 f4       	brcc	.+20     	; 0x1408 <u8g2_DrawLine+0x98>
    13f4:	9c 2d       	mov	r25, r12
    13f6:	8d 2d       	mov	r24, r13
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
    13f8:	68 01       	movw	r12, r16
    13fa:	09 2f       	mov	r16, r25
    13fc:	18 2f       	mov	r17, r24
    13fe:	9c 2f       	mov	r25, r28
    1400:	8d 2f       	mov	r24, r29
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    1402:	e5 01       	movw	r28, r10
    1404:	a9 2e       	mov	r10, r25
    1406:	b8 2e       	mov	r11, r24
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1408:	72 01       	movw	r14, r4
    140a:	f6 94       	lsr	r15
    140c:	e7 94       	ror	r14
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    140e:	c0 16       	cp	r12, r16
    1410:	d1 06       	cpc	r13, r17
    1412:	18 f4       	brcc	.+6      	; 0x141a <u8g2_DrawLine+0xaa>
    1414:	01 e0       	ldi	r16, 0x01	; 1
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <u8g2_DrawLine+0xae>
    141a:	0f ef       	ldi	r16, 0xFF	; 255
    141c:	1f ef       	ldi	r17, 0xFF	; 255

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	a8 16       	cp	r10, r24
    1422:	b8 06       	cpc	r11, r24
    1424:	e1 f4       	brne	.+56     	; 0x145e <u8g2_DrawLine+0xee>
    x2--;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	a8 1a       	sub	r10, r24
    142a:	b1 08       	sbc	r11, r1
#endif

  for( x = x1; x <= x2; x++ )
    142c:	18 c0       	rjmp	.+48     	; 0x145e <u8g2_DrawLine+0xee>
  {
    if ( swapxy == 0 ) 
    142e:	31 10       	cpse	r3, r1
    1430:	06 c0       	rjmp	.+12     	; 0x143e <u8g2_DrawLine+0xce>
      u8g2_DrawPixel(u8g2, x, y); 
    1432:	a6 01       	movw	r20, r12
    1434:	be 01       	movw	r22, r28
    1436:	c3 01       	movw	r24, r6
    1438:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <u8g2_DrawPixel>
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <u8g2_DrawLine+0xd8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    143e:	ae 01       	movw	r20, r28
    1440:	b6 01       	movw	r22, r12
    1442:	c3 01       	movw	r24, r6
    1444:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
    1448:	c7 01       	movw	r24, r14
    144a:	88 19       	sub	r24, r8
    144c:	99 09       	sbc	r25, r9
    144e:	7c 01       	movw	r14, r24
    if ( err < 0 ) 
    1450:	2a f4       	brpl	.+10     	; 0x145c <u8g2_DrawLine+0xec>
    {
      y += (u8g2_uint_t)ystep;
    1452:	c0 0e       	add	r12, r16
    1454:	d1 1e       	adc	r13, r17
      err += (u8g2_uint_t)dx;
    1456:	72 01       	movw	r14, r4
    1458:	e8 0e       	add	r14, r24
    145a:	f9 1e       	adc	r15, r25
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    145c:	21 96       	adiw	r28, 0x01	; 1
    145e:	ac 16       	cp	r10, r28
    1460:	bd 06       	cpc	r11, r29
    1462:	28 f7       	brcc	.-54     	; 0x142e <u8g2_DrawLine+0xbe>
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	af 90       	pop	r10
    1478:	9f 90       	pop	r9
    147a:	8f 90       	pop	r8
    147c:	7f 90       	pop	r7
    147e:	6f 90       	pop	r6
    1480:	5f 90       	pop	r5
    1482:	4f 90       	pop	r4
    1484:	3f 90       	pop	r3
    1486:	08 95       	ret

00001488 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	dc 01       	movw	r26, r24
    1492:	ca 01       	movw	r24, r20
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    1494:	54 2f       	mov	r21, r20
    1496:	57 70       	andi	r21, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    1498:	c1 e0       	ldi	r28, 0x01	; 1
    149a:	d0 e0       	ldi	r29, 0x00	; 0
    149c:	05 2e       	mov	r0, r21
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    14a0:	cc 0f       	add	r28, r28
    14a2:	dd 1f       	adc	r29, r29
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    14a8:	1c 2f       	mov	r17, r28

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    14aa:	fd 01       	movw	r30, r26
    14ac:	ec 58       	subi	r30, 0x8C	; 140
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	e0 81       	ld	r30, Z
    14b2:	e2 30       	cpi	r30, 0x02	; 2
    14b4:	10 f0       	brcs	.+4      	; 0x14ba <u8g2_ll_hvline_vertical_top_lsb+0x32>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <u8g2_ll_hvline_vertical_top_lsb+0x34>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    14ba:	4c 2f       	mov	r20, r28
  if ( u8g2->draw_color != 1 )
    14bc:	e1 30       	cpi	r30, 0x01	; 1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    14c0:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    14c2:	88 7f       	andi	r24, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    14c4:	ed 91       	ld	r30, X+
    14c6:	fc 91       	ld	r31, X
    14c8:	11 97       	sbiw	r26, 0x01	; 1
    14ca:	c0 89       	ldd	r28, Z+16	; 0x10
    14cc:	c8 9f       	mul	r28, r24
    14ce:	f0 01       	movw	r30, r0
    14d0:	c9 9f       	mul	r28, r25
    14d2:	f0 0d       	add	r31, r0
    14d4:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
    14d6:	92 96       	adiw	r26, 0x22	; 34
    14d8:	8d 91       	ld	r24, X+
    14da:	9c 91       	ld	r25, X
    14dc:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
    14de:	6e 0f       	add	r22, r30
    14e0:	7f 1f       	adc	r23, r31
    14e2:	fc 01       	movw	r30, r24
    14e4:	e6 0f       	add	r30, r22
    14e6:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    14e8:	01 11       	cpse	r16, r1
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <u8g2_ll_hvline_vertical_top_lsb+0x74>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    14ec:	80 81       	ld	r24, Z
    14ee:	84 2b       	or	r24, r20
	*ptr ^= xor_mask;
    14f0:	81 27       	eor	r24, r17
    14f2:	81 93       	st	Z+, r24
	ptr++;
	len--;
    14f4:	21 50       	subi	r18, 0x01	; 1
    14f6:	31 09       	sbc	r19, r1
      } while( len != 0 );
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <u8g2_ll_hvline_vertical_top_lsb+0x64>
    14fa:	21 c0       	rjmp	.+66     	; 0x153e <u8g2_ll_hvline_vertical_top_lsb+0xb6>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    14fc:	90 81       	ld	r25, Z
    14fe:	94 2b       	or	r25, r20
      *ptr ^= xor_mask;
    1500:	91 27       	eor	r25, r17
    1502:	90 83       	st	Z, r25
      
      bit_pos++;
    1504:	5f 5f       	subi	r21, 0xFF	; 255
      bit_pos &= 7;
    1506:	57 70       	andi	r21, 0x07	; 7

      len--;
    1508:	21 50       	subi	r18, 0x01	; 1
    150a:	31 09       	sbc	r19, r1

      if ( bit_pos == 0 )
    150c:	51 11       	cpse	r21, r1
    150e:	10 c0       	rjmp	.+32     	; 0x1530 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    1510:	96 96       	adiw	r26, 0x26	; 38
    1512:	8d 91       	ld	r24, X+
    1514:	9c 91       	ld	r25, X
    1516:	97 97       	sbiw	r26, 0x27	; 39
    1518:	e8 0f       	add	r30, r24
    151a:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    151c:	ed 01       	movw	r28, r26
    151e:	cc 58       	subi	r28, 0x8C	; 140
    1520:	df 4f       	sbci	r29, 0xFF	; 255
    1522:	88 81       	ld	r24, Y
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	08 f4       	brcc	.+2      	; 0x152a <u8g2_ll_hvline_vertical_top_lsb+0xa2>
	  or_mask  = 1;
    1528:	41 e0       	ldi	r20, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	21 f4       	brne	.+8      	; 0x1536 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    1530:	44 0f       	add	r20, r20
	xor_mask <<= 1;
    1532:	11 0f       	add	r17, r17
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <u8g2_ll_hvline_vertical_top_lsb+0xb0>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1536:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1538:	21 15       	cp	r18, r1
    153a:	31 05       	cpc	r19, r1
    153c:	f9 f6       	brne	.-66     	; 0x14fc <u8g2_ll_hvline_vertical_top_lsb+0x74>
  }
}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	08 95       	ret

00001548 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	fc 01       	movw	r30, r24
    154e:	a0 81       	ld	r26, Z
    1550:	b1 81       	ldd	r27, Z+1	; 0x01
    1552:	84 a1       	ldd	r24, Z+36	; 0x24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	9c 01       	movw	r18, r24
    1558:	22 0f       	add	r18, r18
    155a:	33 1f       	adc	r19, r19
    155c:	22 0f       	add	r18, r18
    155e:	33 1f       	adc	r19, r19
    1560:	22 0f       	add	r18, r18
    1562:	33 1f       	adc	r19, r19
    1564:	31 a7       	std	Z+41, r19	; 0x29
    1566:	20 a7       	std	Z+40, r18	; 0x28
    1568:	50 96       	adiw	r26, 0x10	; 16
    156a:	2c 91       	ld	r18, X
    156c:	50 97       	sbiw	r26, 0x10	; 16
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	22 0f       	add	r18, r18
    157a:	33 1f       	adc	r19, r19
    157c:	37 a3       	std	Z+39, r19	; 0x27
    157e:	26 a3       	std	Z+38, r18	; 0x26
    1580:	75 a1       	ldd	r23, Z+37	; 0x25
    1582:	27 2f       	mov	r18, r23
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	a9 01       	movw	r20, r18
    1588:	44 0f       	add	r20, r20
    158a:	55 1f       	adc	r21, r21
    158c:	44 0f       	add	r20, r20
    158e:	55 1f       	adc	r21, r21
    1590:	44 0f       	add	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	53 a7       	std	Z+43, r21	; 0x2b
    1596:	42 a7       	std	Z+42, r20	; 0x2a
    1598:	28 0f       	add	r18, r24
    159a:	39 1f       	adc	r19, r25
    159c:	51 96       	adiw	r26, 0x11	; 17
    159e:	6c 91       	ld	r22, X
    15a0:	51 97       	sbiw	r26, 0x11	; 17
    15a2:	c6 2f       	mov	r28, r22
    15a4:	d0 e0       	ldi	r29, 0x00	; 0
    15a6:	c2 17       	cp	r28, r18
    15a8:	d3 07       	cpc	r29, r19
    15aa:	18 f4       	brcc	.+6      	; 0x15b2 <u8g2_update_dimension_common+0x6a>
    15ac:	ce 01       	movw	r24, r28
    15ae:	87 1b       	sub	r24, r23
    15b0:	91 09       	sbc	r25, r1
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	55 a7       	std	Z+45, r21	; 0x2d
    15c0:	44 a7       	std	Z+44, r20	; 0x2c
    15c2:	84 0f       	add	r24, r20
    15c4:	95 1f       	adc	r25, r21
    15c6:	97 a7       	std	Z+47, r25	; 0x2f
    15c8:	86 a7       	std	Z+46, r24	; 0x2e
    15ca:	54 96       	adiw	r26, 0x14	; 20
    15cc:	8d 91       	ld	r24, X+
    15ce:	9c 91       	ld	r25, X
    15d0:	55 97       	sbiw	r26, 0x15	; 21
    15d2:	91 ab       	std	Z+49, r25	; 0x31
    15d4:	80 ab       	std	Z+48, r24	; 0x30
    15d6:	56 96       	adiw	r26, 0x16	; 22
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	57 97       	sbiw	r26, 0x17	; 23
    15de:	93 ab       	std	Z+51, r25	; 0x33
    15e0:	82 ab       	std	Z+50, r24	; 0x32
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <u8g2_update_dimension_r0>:
    15e8:	0e 94 a4 0a 	call	0x1548	; 0x1548 <u8g2_update_dimension_common>
    15ec:	08 95       	ret

000015ee <u8g2_apply_clip_window>:
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	ec 01       	movw	r28, r24
    15f8:	fc 01       	movw	r30, r24
    15fa:	ee 5b       	subi	r30, 0xBE	; 190
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	00 81       	ld	r16, Z
    1600:	11 81       	ldd	r17, Z+1	; 0x01
    1602:	2e ad       	ldd	r18, Y+62	; 0x3e
    1604:	3f ad       	ldd	r19, Y+63	; 0x3f
    1606:	32 97       	sbiw	r30, 0x02	; 2
    1608:	40 81       	ld	r20, Z
    160a:	51 81       	ldd	r21, Z+1	; 0x01
    160c:	6c ad       	ldd	r22, Y+60	; 0x3c
    160e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1610:	0e 94 93 09 	call	0x1326	; 0x1326 <u8g2_IsIntersection>
    1614:	81 11       	cpse	r24, r1
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <u8g2_apply_clip_window+0x32>
    1618:	c2 59       	subi	r28, 0x92	; 146
    161a:	df 4f       	sbci	r29, 0xFF	; 255
    161c:	18 82       	st	Y, r1
    161e:	2f c0       	rjmp	.+94     	; 0x167e <u8g2_apply_clip_window+0x90>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	fe 01       	movw	r30, r28
    1624:	e2 59       	subi	r30, 0x92	; 146
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 83       	st	Z, r24
    162a:	2c a9       	ldd	r18, Y+52	; 0x34
    162c:	3d a9       	ldd	r19, Y+53	; 0x35
    162e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1630:	9d ad       	ldd	r25, Y+61	; 0x3d
    1632:	28 17       	cp	r18, r24
    1634:	39 07       	cpc	r19, r25
    1636:	10 f4       	brcc	.+4      	; 0x163c <u8g2_apply_clip_window+0x4e>
    1638:	9d ab       	std	Y+53, r25	; 0x35
    163a:	8c ab       	std	Y+52, r24	; 0x34
    163c:	2e a9       	ldd	r18, Y+54	; 0x36
    163e:	3f a9       	ldd	r19, Y+55	; 0x37
    1640:	8e ad       	ldd	r24, Y+62	; 0x3e
    1642:	9f ad       	ldd	r25, Y+63	; 0x3f
    1644:	82 17       	cp	r24, r18
    1646:	93 07       	cpc	r25, r19
    1648:	10 f4       	brcc	.+4      	; 0x164e <u8g2_apply_clip_window+0x60>
    164a:	9f ab       	std	Y+55, r25	; 0x37
    164c:	8e ab       	std	Y+54, r24	; 0x36
    164e:	28 ad       	ldd	r18, Y+56	; 0x38
    1650:	39 ad       	ldd	r19, Y+57	; 0x39
    1652:	fe 01       	movw	r30, r28
    1654:	e0 5c       	subi	r30, 0xC0	; 192
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	91 81       	ldd	r25, Z+1	; 0x01
    165c:	28 17       	cp	r18, r24
    165e:	39 07       	cpc	r19, r25
    1660:	10 f4       	brcc	.+4      	; 0x1666 <u8g2_apply_clip_window+0x78>
    1662:	99 af       	std	Y+57, r25	; 0x39
    1664:	88 af       	std	Y+56, r24	; 0x38
    1666:	2a ad       	ldd	r18, Y+58	; 0x3a
    1668:	3b ad       	ldd	r19, Y+59	; 0x3b
    166a:	fe 01       	movw	r30, r28
    166c:	ee 5b       	subi	r30, 0xBE	; 190
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	82 17       	cp	r24, r18
    1676:	93 07       	cpc	r25, r19
    1678:	10 f4       	brcc	.+4      	; 0x167e <u8g2_apply_clip_window+0x90>
    167a:	9b af       	std	Y+59, r25	; 0x3b
    167c:	8a af       	std	Y+58, r24	; 0x3a
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <u8g2_update_page_win_r0>:
    1688:	fc 01       	movw	r30, r24
    168a:	15 aa       	std	Z+53, r1	; 0x35
    168c:	14 aa       	std	Z+52, r1	; 0x34
    168e:	80 a9       	ldd	r24, Z+48	; 0x30
    1690:	91 a9       	ldd	r25, Z+49	; 0x31
    1692:	97 ab       	std	Z+55, r25	; 0x37
    1694:	86 ab       	std	Z+54, r24	; 0x36
    1696:	84 a5       	ldd	r24, Z+44	; 0x2c
    1698:	95 a5       	ldd	r25, Z+45	; 0x2d
    169a:	91 af       	std	Z+57, r25	; 0x39
    169c:	80 af       	std	Z+56, r24	; 0x38
    169e:	86 a5       	ldd	r24, Z+46	; 0x2e
    16a0:	97 a5       	ldd	r25, Z+47	; 0x2f
    16a2:	93 af       	std	Z+59, r25	; 0x3b
    16a4:	82 af       	std	Z+58, r24	; 0x3a
    16a6:	cf 01       	movw	r24, r30
    16a8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <u8g2_apply_clip_window>
    16ac:	08 95       	ret

000016ae <u8g2_draw_l90_r0>:
    16ae:	0f 93       	push	r16
    16b0:	0e 94 b2 08 	call	0x1164	; 0x1164 <u8g2_draw_hv_line_2dir>
    16b4:	0f 91       	pop	r16
    16b6:	08 95       	ret

000016b8 <u8g2_SetMaxClipWindow>:
    16b8:	dc 01       	movw	r26, r24
    16ba:	dd 96       	adiw	r26, 0x3d	; 61
    16bc:	1c 92       	st	X, r1
    16be:	1e 92       	st	-X, r1
    16c0:	dc 97       	sbiw	r26, 0x3c	; 60
    16c2:	fc 01       	movw	r30, r24
    16c4:	e0 5c       	subi	r30, 0xC0	; 192
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	11 82       	std	Z+1, r1	; 0x01
    16ca:	10 82       	st	Z, r1
    16cc:	2f ef       	ldi	r18, 0xFF	; 255
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	fc 01       	movw	r30, r24
    16d2:	37 af       	std	Z+63, r19	; 0x3f
    16d4:	26 af       	std	Z+62, r18	; 0x3e
    16d6:	ee 5b       	subi	r30, 0xBE	; 190
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	31 83       	std	Z+1, r19	; 0x01
    16dc:	20 83       	st	Z, r18
    16de:	90 96       	adiw	r26, 0x20	; 32
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	91 97       	sbiw	r26, 0x21	; 33
    16e6:	02 80       	ldd	r0, Z+2	; 0x02
    16e8:	f3 81       	ldd	r31, Z+3	; 0x03
    16ea:	e0 2d       	mov	r30, r0
    16ec:	09 95       	icall
    16ee:	08 95       	ret

000016f0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    16fa:	fc 01       	movw	r30, r24
    16fc:	ec 5b       	subi	r30, 0xBC	; 188
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	11 82       	std	Z+1, r1	; 0x01
    1702:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1704:	3f 8f       	std	Y+31, r19	; 0x1f
    1706:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    1708:	7b a3       	std	Y+35, r23	; 0x23
    170a:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    170c:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    170e:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1710:	3f 96       	adiw	r30, 0x0f	; 15
    1712:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    1714:	b0 96       	adiw	r30, 0x20	; 32
    1716:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    1718:	34 97       	sbiw	r30, 0x04	; 4
    171a:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    171c:	35 96       	adiw	r30, 0x05	; 5
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1722:	31 96       	adiw	r30, 0x01	; 1
    1724:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1726:	19 a3       	std	Y+33, r17	; 0x21
    1728:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    172a:	d8 01       	movw	r26, r16
    172c:	ed 91       	ld	r30, X+
    172e:	fc 91       	ld	r31, X
    1730:	ce 01       	movw	r24, r28
    1732:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    1734:	ce 01       	movw	r24, r28
    1736:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    173a:	ce 01       	movw	r24, r28
    173c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1740:	ca 5a       	subi	r28, 0xAA	; 170
    1742:	df 4f       	sbci	r29, 0xFF	; 255
    1744:	18 82       	st	Y, r1
#endif
}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	0f 91       	pop	r16
    174e:	08 95       	ret

00001750 <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    1750:	66 23       	and	r22, r22
    1752:	29 f0       	breq	.+10     	; 0x175e <u8x8_ascii_next+0xe>
    1754:	6a 30       	cpi	r22, 0x0A	; 10
    1756:	31 f0       	breq	.+12     	; 0x1764 <u8x8_ascii_next+0x14>
    1758:	86 2f       	mov	r24, r22
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	08 95       	ret
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	08 95       	ret
    1764:	8f ef       	ldi	r24, 0xFF	; 255
    1766:	9f ef       	ldi	r25, 0xFF	; 255
    1768:	08 95       	ret

0000176a <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    176a:	fc 01       	movw	r30, r24
    176c:	10 8e       	std	Z+24, r1	; 0x18
    176e:	08 95       	ret

00001770 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    1770:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    1772:	dc 01       	movw	r26, r24
    1774:	18 96       	adiw	r26, 0x08	; 8
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	19 97       	sbiw	r26, 0x09	; 9
    177c:	46 2f       	mov	r20, r22
    177e:	67 e1       	ldi	r22, 0x17	; 23
    1780:	09 95       	icall
}
    1782:	08 95       	ret

00001784 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	1f 92       	push	r1
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1790:	ae 01       	movw	r20, r28
    1792:	4f 5f       	subi	r20, 0xFF	; 255
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	0e 94 b8 0b 	call	0x1770	; 0x1770 <u8x8_byte_SendBytes>
}
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    17a4:	dc 01       	movw	r26, r24
    17a6:	18 96       	adiw	r26, 0x08	; 8
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	19 97       	sbiw	r26, 0x09	; 9
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	68 e1       	ldi	r22, 0x18	; 24
    17b6:	09 95       	icall
}
    17b8:	08 95       	ret

000017ba <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    17ba:	dc 01       	movw	r26, r24
    17bc:	18 96       	adiw	r26, 0x08	; 8
    17be:	ed 91       	ld	r30, X+
    17c0:	fc 91       	ld	r31, X
    17c2:	19 97       	sbiw	r26, 0x09	; 9
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	69 e1       	ldi	r22, 0x19	; 25
    17cc:	09 95       	icall
}
    17ce:	08 95       	ret

000017d0 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ec 01       	movw	r28, r24
    17dc:	16 2f       	mov	r17, r22
    17de:	7a 01       	movw	r14, r20
    17e0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <u8x8_byte_StartTransfer>
    17e4:	60 e4       	ldi	r22, 0x40	; 64
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 c2 0b 	call	0x1784	; 0x1784 <u8x8_byte_SendByte>
    17ec:	e8 85       	ldd	r30, Y+8	; 0x08
    17ee:	f9 85       	ldd	r31, Y+9	; 0x09
    17f0:	97 01       	movw	r18, r14
    17f2:	41 2f       	mov	r20, r17
    17f4:	67 e1       	ldi	r22, 0x17	; 23
    17f6:	ce 01       	movw	r24, r28
    17f8:	09 95       	icall
    17fa:	ce 01       	movw	r24, r28
    17fc:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_byte_EndTransfer>
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	08 95       	ret

0000180c <u8x8_cad_SendCmd>:
    180c:	46 2f       	mov	r20, r22
    180e:	dc 01       	movw	r26, r24
    1810:	16 96       	adiw	r26, 0x06	; 6
    1812:	ed 91       	ld	r30, X+
    1814:	fc 91       	ld	r31, X
    1816:	17 97       	sbiw	r26, 0x07	; 7
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	65 e1       	ldi	r22, 0x15	; 21
    181e:	09 95       	icall
    1820:	08 95       	ret

00001822 <u8x8_cad_SendArg>:
    1822:	46 2f       	mov	r20, r22
    1824:	dc 01       	movw	r26, r24
    1826:	16 96       	adiw	r26, 0x06	; 6
    1828:	ed 91       	ld	r30, X+
    182a:	fc 91       	ld	r31, X
    182c:	17 97       	sbiw	r26, 0x07	; 7
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	66 e1       	ldi	r22, 0x16	; 22
    1834:	09 95       	icall
    1836:	08 95       	ret

00001838 <u8x8_cad_SendData>:
    1838:	9a 01       	movw	r18, r20
    183a:	dc 01       	movw	r26, r24
    183c:	16 96       	adiw	r26, 0x06	; 6
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	17 97       	sbiw	r26, 0x07	; 7
    1844:	46 2f       	mov	r20, r22
    1846:	67 e1       	ldi	r22, 0x17	; 23
    1848:	09 95       	icall
    184a:	08 95       	ret

0000184c <u8x8_cad_StartTransfer>:
    184c:	dc 01       	movw	r26, r24
    184e:	16 96       	adiw	r26, 0x06	; 6
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	17 97       	sbiw	r26, 0x07	; 7
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	68 e1       	ldi	r22, 0x18	; 24
    185e:	09 95       	icall
    1860:	08 95       	ret

00001862 <u8x8_cad_EndTransfer>:
    1862:	dc 01       	movw	r26, r24
    1864:	16 96       	adiw	r26, 0x06	; 6
    1866:	ed 91       	ld	r30, X+
    1868:	fc 91       	ld	r31, X
    186a:	17 97       	sbiw	r26, 0x07	; 7
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	69 e1       	ldi	r22, 0x19	; 25
    1874:	09 95       	icall
    1876:	08 95       	ret

00001878 <u8x8_cad_SendSequence>:
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	1f 92       	push	r1
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	7c 01       	movw	r14, r24
    188c:	8b 01       	movw	r16, r22
    188e:	d8 01       	movw	r26, r16
    1890:	6d 91       	ld	r22, X+
    1892:	8d 01       	movw	r16, r26
    1894:	67 31       	cpi	r22, 0x17	; 23
    1896:	b9 f0       	breq	.+46     	; 0x18c6 <u8x8_cad_SendSequence+0x4e>
    1898:	18 f4       	brcc	.+6      	; 0x18a0 <u8x8_cad_SendSequence+0x28>
    189a:	65 31       	cpi	r22, 0x15	; 21
    189c:	30 f4       	brcc	.+12     	; 0x18aa <u8x8_cad_SendSequence+0x32>
    189e:	33 c0       	rjmp	.+102    	; 0x1906 <u8x8_cad_SendSequence+0x8e>
    18a0:	6a 31       	cpi	r22, 0x1A	; 26
    18a2:	e8 f0       	brcs	.+58     	; 0x18de <u8x8_cad_SendSequence+0x66>
    18a4:	6e 3f       	cpi	r22, 0xFE	; 254
    18a6:	31 f1       	breq	.+76     	; 0x18f4 <u8x8_cad_SendSequence+0x7c>
    18a8:	2e c0       	rjmp	.+92     	; 0x1906 <u8x8_cad_SendSequence+0x8e>
    18aa:	fd 01       	movw	r30, r26
    18ac:	41 91       	ld	r20, Z+
    18ae:	8f 01       	movw	r16, r30
    18b0:	49 83       	std	Y+1, r20	; 0x01
    18b2:	d7 01       	movw	r26, r14
    18b4:	16 96       	adiw	r26, 0x06	; 6
    18b6:	ed 91       	ld	r30, X+
    18b8:	fc 91       	ld	r31, X
    18ba:	17 97       	sbiw	r26, 0x07	; 7
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	c7 01       	movw	r24, r14
    18c2:	09 95       	icall
    18c4:	e4 cf       	rjmp	.-56     	; 0x188e <u8x8_cad_SendSequence+0x16>
    18c6:	fd 01       	movw	r30, r26
    18c8:	81 91       	ld	r24, Z+
    18ca:	8f 01       	movw	r16, r30
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	ae 01       	movw	r20, r28
    18d0:	4f 5f       	subi	r20, 0xFF	; 255
    18d2:	5f 4f       	sbci	r21, 0xFF	; 255
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	c7 01       	movw	r24, r14
    18d8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <u8x8_cad_SendData>
    18dc:	d8 cf       	rjmp	.-80     	; 0x188e <u8x8_cad_SendSequence+0x16>
    18de:	d7 01       	movw	r26, r14
    18e0:	16 96       	adiw	r26, 0x06	; 6
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	17 97       	sbiw	r26, 0x07	; 7
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	c7 01       	movw	r24, r14
    18f0:	09 95       	icall
    18f2:	cd cf       	rjmp	.-102    	; 0x188e <u8x8_cad_SendSequence+0x16>
    18f4:	fd 01       	movw	r30, r26
    18f6:	41 91       	ld	r20, Z+
    18f8:	8f 01       	movw	r16, r30
    18fa:	49 83       	std	Y+1, r20	; 0x01
    18fc:	69 e2       	ldi	r22, 0x29	; 41
    18fe:	c7 01       	movw	r24, r14
    1900:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1904:	c4 cf       	rjmp	.-120    	; 0x188e <u8x8_cad_SendSequence+0x16>
    1906:	0f 90       	pop	r0
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	ff 90       	pop	r15
    1912:	ef 90       	pop	r14
    1914:	08 95       	ret

00001916 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	cf 93       	push	r28
    1920:	7c 01       	movw	r14, r24
    1922:	c4 2f       	mov	r28, r20
    1924:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    1926:	66 31       	cpi	r22, 0x16	; 22
    1928:	29 f1       	breq	.+74     	; 0x1974 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    192a:	30 f4       	brcc	.+12     	; 0x1938 <u8x8_cad_ssd13xx_fast_i2c+0x22>
    192c:	64 31       	cpi	r22, 0x14	; 20
    192e:	09 f4       	brne	.+2      	; 0x1932 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    1930:	41 c0       	rjmp	.+130    	; 0x19b4 <u8x8_cad_ssd13xx_fast_i2c+0x9e>
    1932:	65 31       	cpi	r22, 0x15	; 21
    1934:	49 f0       	breq	.+18     	; 0x1948 <u8x8_cad_ssd13xx_fast_i2c+0x32>
    1936:	60 c0       	rjmp	.+192    	; 0x19f8 <u8x8_cad_ssd13xx_fast_i2c+0xe2>
    1938:	68 31       	cpi	r22, 0x18	; 24
    193a:	09 f4       	brne	.+2      	; 0x193e <u8x8_cad_ssd13xx_fast_i2c+0x28>
    193c:	4e c0       	rjmp	.+156    	; 0x19da <u8x8_cad_ssd13xx_fast_i2c+0xc4>
    193e:	f8 f0       	brcs	.+62     	; 0x197e <u8x8_cad_ssd13xx_fast_i2c+0x68>
    1940:	69 31       	cpi	r22, 0x19	; 25
    1942:	09 f4       	brne	.+2      	; 0x1946 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    1944:	4e c0       	rjmp	.+156    	; 0x19e2 <u8x8_cad_ssd13xx_fast_i2c+0xcc>
    1946:	58 c0       	rjmp	.+176    	; 0x19f8 <u8x8_cad_ssd13xx_fast_i2c+0xe2>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    1948:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <in_transfer.3630>
    194c:	88 23       	and	r24, r24
    194e:	19 f0       	breq	.+6      	; 0x1956 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    1950:	c7 01       	movw	r24, r14
    1952:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    1956:	c7 01       	movw	r24, r14
    1958:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	c7 01       	movw	r24, r14
    1960:	0e 94 c2 0b 	call	0x1784	; 0x1784 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    1964:	6c 2f       	mov	r22, r28
    1966:	c7 01       	movw	r24, r14
    1968:	0e 94 c2 0b 	call	0x1784	; 0x1784 <u8x8_byte_SendByte>
      in_transfer = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <in_transfer.3630>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    1972:	43 c0       	rjmp	.+134    	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    1974:	64 2f       	mov	r22, r20
    1976:	0e 94 c2 0b 	call	0x1784	; 0x1784 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    197c:	3e c0       	rjmp	.+124    	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    197e:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <in_transfer.3630>
    1982:	88 23       	and	r24, r24
    1984:	61 f0       	breq	.+24     	; 0x199e <u8x8_cad_ssd13xx_fast_i2c+0x88>
	u8x8_byte_EndTransfer(u8x8); 
    1986:	c7 01       	movw	r24, r14
    1988:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_byte_EndTransfer>
    198c:	08 c0       	rjmp	.+16     	; 0x199e <u8x8_cad_ssd13xx_fast_i2c+0x88>
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    198e:	a8 01       	movw	r20, r16
    1990:	68 e1       	ldi	r22, 0x18	; 24
    1992:	c7 01       	movw	r24, r14
    1994:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <u8x8_i2c_data_transfer>
	arg_int-=24;
    1998:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    199a:	08 5e       	subi	r16, 0xE8	; 232
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    199e:	c9 31       	cpi	r28, 0x19	; 25
    19a0:	b0 f7       	brcc	.-20     	; 0x198e <u8x8_cad_ssd13xx_fast_i2c+0x78>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    19a2:	a8 01       	movw	r20, r16
    19a4:	6c 2f       	mov	r22, r28
    19a6:	c7 01       	movw	r24, r14
    19a8:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    19ac:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <in_transfer.3630>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    19b2:	23 c0       	rjmp	.+70     	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    19b4:	dc 01       	movw	r26, r24
    19b6:	56 96       	adiw	r26, 0x16	; 22
    19b8:	8c 91       	ld	r24, X
    19ba:	56 97       	sbiw	r26, 0x16	; 22
    19bc:	8f 3f       	cpi	r24, 0xFF	; 255
    19be:	19 f4       	brne	.+6      	; 0x19c6 <u8x8_cad_ssd13xx_fast_i2c+0xb0>
	u8x8->i2c_address = 0x078;
    19c0:	88 e7       	ldi	r24, 0x78	; 120
    19c2:	56 96       	adiw	r26, 0x16	; 22
    19c4:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    19c6:	d7 01       	movw	r26, r14
    19c8:	18 96       	adiw	r26, 0x08	; 8
    19ca:	ed 91       	ld	r30, X+
    19cc:	fc 91       	ld	r31, X
    19ce:	19 97       	sbiw	r26, 0x09	; 9
    19d0:	98 01       	movw	r18, r16
    19d2:	4c 2f       	mov	r20, r28
    19d4:	c7 01       	movw	r24, r14
    19d6:	09 95       	icall
    19d8:	10 c0       	rjmp	.+32     	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    19da:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <in_transfer.3630>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    19e0:	0c c0       	rjmp	.+24     	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    19e2:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <in_transfer.3630>
    19e6:	88 23       	and	r24, r24
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <u8x8_cad_ssd13xx_fast_i2c+0xda>
	u8x8_byte_EndTransfer(u8x8); 
    19ea:	c7 01       	movw	r24, r14
    19ec:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <u8x8_byte_EndTransfer>
      in_transfer = 0;
    19f0:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <in_transfer.3630>
      break;
    default:
      return 0;
  }
  return 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    default:
      return 0;
    19f8:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	08 95       	ret

00001a06 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1a06:	fc 01       	movw	r30, r24
    1a08:	71 83       	std	Z+1, r23	; 0x01
    1a0a:	60 83       	st	Z, r22
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	22 89       	ldd	r18, Z+18	; 0x12
    1a10:	fc 01       	movw	r30, r24
    1a12:	24 8b       	std	Z+20, r18	; 0x14
    1a14:	08 95       	ret

00001a16 <u8x8_d_helper_display_init>:
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	ec 01       	movw	r28, r24
    1a1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	68 e2       	ldi	r22, 0x28	; 40
    1a28:	09 95       	icall
    1a2a:	ee 81       	ldd	r30, Y+6	; 0x06
    1a2c:	ff 81       	ldd	r31, Y+7	; 0x07
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	64 e1       	ldi	r22, 0x14	; 20
    1a36:	ce 01       	movw	r24, r28
    1a38:	09 95       	icall
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	6b e4       	ldi	r22, 0x4B	; 75
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a44:	e8 81       	ld	r30, Y
    1a46:	f9 81       	ldd	r31, Y+1	; 0x01
    1a48:	44 81       	ldd	r20, Z+4	; 0x04
    1a4a:	69 e2       	ldi	r22, 0x29	; 41
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	6b e4       	ldi	r22, 0x4B	; 75
    1a56:	ce 01       	movw	r24, r28
    1a58:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a5c:	e8 81       	ld	r30, Y
    1a5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a60:	44 81       	ldd	r20, Z+4	; 0x04
    1a62:	69 e2       	ldi	r22, 0x29	; 41
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a6a:	41 e0       	ldi	r20, 0x01	; 1
    1a6c:	6b e4       	ldi	r22, 0x4B	; 75
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a74:	e8 81       	ld	r30, Y
    1a76:	f9 81       	ldd	r31, Y+1	; 0x01
    1a78:	45 81       	ldd	r20, Z+5	; 0x05
    1a7a:	69 e2       	ldi	r22, 0x29	; 41
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <u8x8_gpio_call>
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <u8x8_DrawTile>:
    1a88:	0f 93       	push	r16
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <u8x8_DrawTile+0xa>
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <u8x8_DrawTile+0xc>
    1a94:	1f 92       	push	r1
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	6c 83       	std	Y+4, r22	; 0x04
    1a9c:	4d 83       	std	Y+5, r20	; 0x05
    1a9e:	2b 83       	std	Y+3, r18	; 0x03
    1aa0:	1a 83       	std	Y+2, r17	; 0x02
    1aa2:	09 83       	std	Y+1, r16	; 0x01
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	14 96       	adiw	r26, 0x04	; 4
    1aa8:	ed 91       	ld	r30, X+
    1aaa:	fc 91       	ld	r31, X
    1aac:	15 97       	sbiw	r26, 0x05	; 5
    1aae:	9e 01       	movw	r18, r28
    1ab0:	2f 5f       	subi	r18, 0xFF	; 255
    1ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab4:	41 e0       	ldi	r20, 0x01	; 1
    1ab6:	6f e0       	ldi	r22, 0x0F	; 15
    1ab8:	09 95       	icall
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <u8x8_SetupMemory>:
    1ace:	dc 01       	movw	r26, r24
    1ad0:	14 96       	adiw	r26, 0x04	; 4
    1ad2:	ed 91       	ld	r30, X+
    1ad4:	fc 91       	ld	r31, X
    1ad6:	15 97       	sbiw	r26, 0x05	; 5
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	69 e0       	ldi	r22, 0x09	; 9
    1ae0:	09 95       	icall
    1ae2:	08 95       	ret

00001ae4 <u8x8_InitDisplay>:
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	14 96       	adiw	r26, 0x04	; 4
    1ae8:	ed 91       	ld	r30, X+
    1aea:	fc 91       	ld	r31, X
    1aec:	15 97       	sbiw	r26, 0x05	; 5
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	6a e0       	ldi	r22, 0x0A	; 10
    1af6:	09 95       	icall
    1af8:	08 95       	ret

00001afa <u8x8_SetPowerSave>:
    1afa:	46 2f       	mov	r20, r22
    1afc:	dc 01       	movw	r26, r24
    1afe:	14 96       	adiw	r26, 0x04	; 4
    1b00:	ed 91       	ld	r30, X+
    1b02:	fc 91       	ld	r31, X
    1b04:	15 97       	sbiw	r26, 0x05	; 5
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	6b e0       	ldi	r22, 0x0B	; 11
    1b0c:	09 95       	icall
    1b0e:	08 95       	ret

00001b10 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1b10:	dc 01       	movw	r26, r24
    1b12:	14 96       	adiw	r26, 0x04	; 4
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	15 97       	sbiw	r26, 0x05	; 5
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	60 e1       	ldi	r22, 0x10	; 16
    1b22:	09 95       	icall
    1b24:	08 95       	ret

00001b26 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1b26:	ef 92       	push	r14
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	8c 01       	movw	r16, r24
    1b34:	c4 2f       	mov	r28, r20
    1b36:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    1b38:	6d 30       	cpi	r22, 0x0D	; 13
    1b3a:	b9 f0       	breq	.+46     	; 0x1b6a <u8x8_d_ssd1306_sh1106_generic+0x44>
    1b3c:	18 f4       	brcc	.+6      	; 0x1b44 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    1b3e:	6b 30       	cpi	r22, 0x0B	; 11
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <u8x8_d_ssd1306_sh1106_generic+0x28>
    1b42:	72 c0       	rjmp	.+228    	; 0x1c28 <u8x8_d_ssd1306_sh1106_generic+0x102>
    1b44:	6e 30       	cpi	r22, 0x0E	; 14
    1b46:	69 f1       	breq	.+90     	; 0x1ba2 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    1b48:	6f 30       	cpi	r22, 0x0F	; 15
    1b4a:	d1 f1       	breq	.+116    	; 0x1bc0 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    1b4c:	6d c0       	rjmp	.+218    	; 0x1c28 <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1b4e:	41 11       	cpse	r20, r1
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    1b52:	61 e3       	ldi	r22, 0x31	; 49
    1b54:	71 e0       	ldi	r23, 0x01	; 1
    1b56:	0e 94 3c 0c 	call	0x1878	; 0x1878 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	66 c0       	rjmp	.+204    	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    1b5e:	6c e2       	ldi	r22, 0x2C	; 44
    1b60:	71 e0       	ldi	r23, 0x01	; 1
    1b62:	0e 94 3c 0c 	call	0x1878	; 0x1878 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	60 c0       	rjmp	.+192    	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1b6a:	41 11       	cpse	r20, r1
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    1b6e:	65 e2       	ldi	r22, 0x25	; 37
    1b70:	71 e0       	ldi	r23, 0x01	; 1
    1b72:	0e 94 3c 0c 	call	0x1878	; 0x1878 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    1b76:	d8 01       	movw	r26, r16
    1b78:	ed 91       	ld	r30, X+
    1b7a:	fc 91       	ld	r31, X
    1b7c:	11 97       	sbiw	r26, 0x01	; 1
    1b7e:	82 89       	ldd	r24, Z+18	; 0x12
    1b80:	54 96       	adiw	r26, 0x14	; 20
    1b82:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	51 c0       	rjmp	.+162    	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    1b88:	6e e1       	ldi	r22, 0x1E	; 30
    1b8a:	71 e0       	ldi	r23, 0x01	; 1
    1b8c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1b90:	d8 01       	movw	r26, r16
    1b92:	ed 91       	ld	r30, X+
    1b94:	fc 91       	ld	r31, X
    1b96:	11 97       	sbiw	r26, 0x01	; 1
    1b98:	83 89       	ldd	r24, Z+19	; 0x13
    1b9a:	54 96       	adiw	r26, 0x14	; 20
    1b9c:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	44 c0       	rjmp	.+136    	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1ba2:	0e 94 26 0c 	call	0x184c	; 0x184c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1ba6:	61 e8       	ldi	r22, 0x81	; 129
    1ba8:	c8 01       	movw	r24, r16
    1baa:	0e 94 06 0c 	call	0x180c	; 0x180c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    1bae:	6c 2f       	mov	r22, r28
    1bb0:	c8 01       	movw	r24, r16
    1bb2:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	0e 94 31 0c 	call	0x1862	; 0x1862 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    1bbe:	35 c0       	rjmp	.+106    	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1bc0:	0e 94 26 0c 	call	0x184c	; 0x184c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1bc4:	f7 01       	movw	r30, r14
    1bc6:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    1bc8:	dd 0f       	add	r29, r29
    1bca:	dd 0f       	add	r29, r29
    1bcc:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    1bce:	d8 01       	movw	r26, r16
    1bd0:	54 96       	adiw	r26, 0x14	; 20
    1bd2:	8c 91       	ld	r24, X
    1bd4:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    1bd6:	60 e4       	ldi	r22, 0x40	; 64
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 06 0c 	call	0x180c	; 0x180c <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1bde:	6d 2f       	mov	r22, r29
    1be0:	62 95       	swap	r22
    1be2:	6f 70       	andi	r22, 0x0F	; 15
    1be4:	60 61       	ori	r22, 0x10	; 16
    1be6:	c8 01       	movw	r24, r16
    1be8:	0e 94 06 0c 	call	0x180c	; 0x180c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    1bec:	6d 2f       	mov	r22, r29
    1bee:	6f 70       	andi	r22, 0x0F	; 15
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	64 81       	ldd	r22, Z+4	; 0x04
    1bfa:	60 6b       	ori	r22, 0xB0	; 176
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	0e 94 11 0c 	call	0x1822	; 0x1822 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
    1c02:	d7 01       	movw	r26, r14
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	6c 91       	ld	r22, X
    1c08:	12 97       	sbiw	r26, 0x02	; 2
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    1c0a:	4d 91       	ld	r20, X+
    1c0c:	5c 91       	ld	r21, X
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    1c0e:	66 0f       	add	r22, r22
    1c10:	66 0f       	add	r22, r22
    1c12:	66 0f       	add	r22, r22
    1c14:	c8 01       	movw	r24, r16
    1c16:	0e 94 1c 0c 	call	0x1838	; 0x1838 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    1c1a:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    1c1c:	91 f7       	brne	.-28     	; 0x1c02 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    1c1e:	c8 01       	movw	r24, r16
    1c20:	0e 94 31 0c 	call	0x1862	; 0x1862 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    1c28:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	ff 90       	pop	r15
    1c34:	ef 90       	pop	r14
    1c36:	08 95       	ret

00001c38 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	8c 01       	movw	r16, r24
    1c40:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    1c42:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <u8x8_d_ssd1306_sh1106_generic>
    1c46:	81 11       	cpse	r24, r1
    1c48:	15 c0       	rjmp	.+42     	; 0x1c74 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    1c4a:	c9 30       	cpi	r28, 0x09	; 9
    1c4c:	61 f0       	breq	.+24     	; 0x1c66 <u8x8_d_ssd1306_128x64_noname+0x2e>
    1c4e:	ca 30       	cpi	r28, 0x0A	; 10
    1c50:	91 f4       	brne	.+36     	; 0x1c76 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1c52:	c8 01       	movw	r24, r16
    1c54:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    1c58:	66 e3       	ldi	r22, 0x36	; 54
    1c5a:	71 e0       	ldi	r23, 0x01	; 1
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	0e 94 3c 0c 	call	0x1878	; 0x1878 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    1c64:	08 c0       	rjmp	.+16     	; 0x1c76 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    1c66:	66 e0       	ldi	r22, 0x06	; 6
    1c68:	71 e0       	ldi	r23, 0x01	; 1
    1c6a:	c8 01       	movw	r24, r16
    1c6c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	08 95       	ret

00001c7e <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    1c7e:	dc 01       	movw	r26, r24
    1c80:	1a 96       	adiw	r26, 0x0a	; 10
    1c82:	ed 91       	ld	r30, X+
    1c84:	fc 91       	ld	r31, X
    1c86:	1b 97       	sbiw	r26, 0x0b	; 11
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	09 95       	icall
    1c8e:	08 95       	ret

00001c90 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	08 95       	ret

00001c94 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1c94:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1c96:	11 82       	std	Z+1, r1	; 0x01
    1c98:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    1c9a:	88 e4       	ldi	r24, 0x48	; 72
    1c9c:	9e e0       	ldi	r25, 0x0E	; 14
    1c9e:	95 83       	std	Z+5, r25	; 0x05
    1ca0:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1ca2:	97 83       	std	Z+7, r25	; 0x07
    1ca4:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1ca6:	91 87       	std	Z+9, r25	; 0x09
    1ca8:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    1caa:	93 87       	std	Z+11, r25	; 0x0b
    1cac:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1cae:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1cb0:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1cb2:	14 86       	std	Z+12, r1	; 0x0c
    1cb4:	15 86       	std	Z+13, r1	; 0x0d
    1cb6:	16 86       	std	Z+14, r1	; 0x0e
    1cb8:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1cbe:	82 8f       	std	Z+26, r24	; 0x1a
    1cc0:	08 95       	ret

00001cc2 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	5b 01       	movw	r10, r22
    1cda:	6a 01       	movw	r12, r20
    1cdc:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1cde:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1ce2:	bd 82       	std	Y+5, r11	; 0x05
    1ce4:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1ce6:	df 82       	std	Y+7, r13	; 0x07
    1ce8:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1cea:	f9 86       	std	Y+9, r15	; 0x09
    1cec:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1cee:	1b 87       	std	Y+11, r17	; 0x0b
    1cf0:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <u8x8_SetupMemory>
}
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	08 95       	ret

00001d0e <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1d0e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1d12:	88 e4       	ldi	r24, 0x48	; 72
    1d14:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1d18:	08 95       	ret

00001d1a <i2c_start_wait>:
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	94 ea       	ldi	r25, 0xA4	; 164
    1d20:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d24:	4f ef       	ldi	r20, 0xFF	; 255
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <i2c_start_wait+0x18>
    1d2e:	b9 01       	movw	r22, r18
    1d30:	a8 01       	movw	r20, r16
    1d32:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d36:	99 23       	and	r25, r25
    1d38:	54 f0       	brlt	.+20     	; 0x1d4e <i2c_start_wait+0x34>
    1d3a:	8a 01       	movw	r16, r20
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	01 50       	subi	r16, 0x01	; 1
    1d40:	11 09       	sbc	r17, r1
    1d42:	21 09       	sbc	r18, r1
    1d44:	31 09       	sbc	r19, r1
    1d46:	45 2b       	or	r20, r21
    1d48:	46 2b       	or	r20, r22
    1d4a:	47 2b       	or	r20, r23
    1d4c:	81 f7       	brne	.-32     	; 0x1d2e <i2c_start_wait+0x14>
    1d4e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1d52:	98 7f       	andi	r25, 0xF8	; 248
    1d54:	98 30       	cpi	r25, 0x08	; 8
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <i2c_start_wait+0x42>
    1d58:	90 31       	cpi	r25, 0x10	; 16
    1d5a:	09 f7       	brne	.-62     	; 0x1d1e <i2c_start_wait+0x4>
    1d5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1d60:	94 e8       	ldi	r25, 0x84	; 132
    1d62:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d66:	4f ef       	ldi	r20, 0xFF	; 255
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <i2c_start_wait+0x5a>
    1d70:	b9 01       	movw	r22, r18
    1d72:	a8 01       	movw	r20, r16
    1d74:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1d78:	99 23       	and	r25, r25
    1d7a:	54 f0       	brlt	.+20     	; 0x1d90 <i2c_start_wait+0x76>
    1d7c:	8a 01       	movw	r16, r20
    1d7e:	9b 01       	movw	r18, r22
    1d80:	01 50       	subi	r16, 0x01	; 1
    1d82:	11 09       	sbc	r17, r1
    1d84:	21 09       	sbc	r18, r1
    1d86:	31 09       	sbc	r19, r1
    1d88:	45 2b       	or	r20, r21
    1d8a:	46 2b       	or	r20, r22
    1d8c:	47 2b       	or	r20, r23
    1d8e:	81 f7       	brne	.-32     	; 0x1d70 <i2c_start_wait+0x56>
    1d90:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1d94:	98 7f       	andi	r25, 0xF8	; 248
    1d96:	90 32       	cpi	r25, 0x20	; 32
    1d98:	11 f0       	breq	.+4      	; 0x1d9e <i2c_start_wait+0x84>
    1d9a:	98 35       	cpi	r25, 0x58	; 88
    1d9c:	c9 f4       	brne	.+50     	; 0x1dd0 <i2c_start_wait+0xb6>
    1d9e:	94 e9       	ldi	r25, 0x94	; 148
    1da0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1da4:	4f ef       	ldi	r20, 0xFF	; 255
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <i2c_start_wait+0x98>
    1dae:	b9 01       	movw	r22, r18
    1db0:	a8 01       	movw	r20, r16
    1db2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1db6:	94 ff       	sbrs	r25, 4
    1db8:	b2 cf       	rjmp	.-156    	; 0x1d1e <i2c_start_wait+0x4>
    1dba:	8a 01       	movw	r16, r20
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	01 50       	subi	r16, 0x01	; 1
    1dc0:	11 09       	sbc	r17, r1
    1dc2:	21 09       	sbc	r18, r1
    1dc4:	31 09       	sbc	r19, r1
    1dc6:	45 2b       	or	r20, r21
    1dc8:	46 2b       	or	r20, r22
    1dca:	47 2b       	or	r20, r23
    1dcc:	81 f7       	brne	.-32     	; 0x1dae <i2c_start_wait+0x94>
    1dce:	a7 cf       	rjmp	.-178    	; 0x1d1e <i2c_start_wait+0x4>
    1dd0:	1f 91       	pop	r17
    1dd2:	0f 91       	pop	r16
    1dd4:	08 95       	ret

00001dd6 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1dd6:	84 e9       	ldi	r24, 0x94	; 148
    1dd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <i2c_stop+0x14>
    1de6:	db 01       	movw	r26, r22
    1de8:	ca 01       	movw	r24, r20
    1dea:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1dee:	24 ff       	sbrs	r18, 4
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <i2c_stop+0x30>
    1df2:	ac 01       	movw	r20, r24
    1df4:	bd 01       	movw	r22, r26
    1df6:	41 50       	subi	r20, 0x01	; 1
    1df8:	51 09       	sbc	r21, r1
    1dfa:	61 09       	sbc	r22, r1
    1dfc:	71 09       	sbc	r23, r1
    1dfe:	89 2b       	or	r24, r25
    1e00:	8a 2b       	or	r24, r26
    1e02:	8b 2b       	or	r24, r27
    1e04:	81 f7       	brne	.-32     	; 0x1de6 <i2c_stop+0x10>
    1e06:	08 95       	ret

00001e08 <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1e08:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1e0c:	84 e8       	ldi	r24, 0x84	; 132
    1e0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	a0 e0       	ldi	r26, 0x00	; 0
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <i2c_write+0x18>
    1e1c:	db 01       	movw	r26, r22
    1e1e:	ca 01       	movw	r24, r20
    1e20:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1e24:	22 23       	and	r18, r18
    1e26:	64 f0       	brlt	.+24     	; 0x1e40 <i2c_write+0x38>
    1e28:	ac 01       	movw	r20, r24
    1e2a:	bd 01       	movw	r22, r26
    1e2c:	41 50       	subi	r20, 0x01	; 1
    1e2e:	51 09       	sbc	r21, r1
    1e30:	61 09       	sbc	r22, r1
    1e32:	71 09       	sbc	r23, r1
    1e34:	89 2b       	or	r24, r25
    1e36:	8a 2b       	or	r24, r26
    1e38:	8b 2b       	or	r24, r27
    1e3a:	81 f7       	brne	.-32     	; 0x1e1c <i2c_write+0x14>
    1e3c:	db 01       	movw	r26, r22
    1e3e:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    1e40:	89 2b       	or	r24, r25
    1e42:	8a 2b       	or	r24, r26
    1e44:	8b 2b       	or	r24, r27
    1e46:	39 f0       	breq	.+14     	; 0x1e56 <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1e48:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1e4c:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1e4e:	88 32       	cpi	r24, 0x28	; 40
    1e50:	21 f0       	breq	.+8      	; 0x1e5a <i2c_write+0x52>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    1e5a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    1e5c:	08 95       	ret

00001e5e <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
	uint8_t *data;
	switch(msg){
    1e64:	68 31       	cpi	r22, 0x18	; 24
    1e66:	f9 f0       	breq	.+62     	; 0x1ea6 <u8x8_byte_avr_hw_i2c+0x48>
    1e68:	28 f4       	brcc	.+10     	; 0x1e74 <u8x8_byte_avr_hw_i2c+0x16>
    1e6a:	64 31       	cpi	r22, 0x14	; 20
    1e6c:	c1 f0       	breq	.+48     	; 0x1e9e <u8x8_byte_avr_hw_i2c+0x40>
    1e6e:	67 31       	cpi	r22, 0x17	; 23
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <u8x8_byte_avr_hw_i2c+0x34>
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <u8x8_byte_avr_hw_i2c+0x1e>
    1e74:	69 31       	cpi	r22, 0x19	; 25
    1e76:	e9 f0       	breq	.+58     	; 0x1eb2 <u8x8_byte_avr_hw_i2c+0x54>
    1e78:	60 32       	cpi	r22, 0x20	; 32
    1e7a:	f9 f0       	breq	.+62     	; 0x1eba <u8x8_byte_avr_hw_i2c+0x5c>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	1e c0       	rjmp	.+60     	; 0x1ebc <u8x8_byte_avr_hw_i2c+0x5e>
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
    1e80:	89 01       	movw	r16, r18
    1e82:	0f 5f       	subi	r16, 0xFF	; 255
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	f9 01       	movw	r30, r18
    1e88:	80 81       	ld	r24, Z
    1e8a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1e8e:	4c 2f       	mov	r20, r28
				i2c_write(*data++);
    1e90:	98 01       	movw	r18, r16
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1e92:	cf ef       	ldi	r28, 0xFF	; 255
    1e94:	c4 0f       	add	r28, r20
    1e96:	41 11       	cpse	r20, r1
    1e98:	f3 cf       	rjmp	.-26     	; 0x1e80 <u8x8_byte_avr_hw_i2c+0x22>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	0f c0       	rjmp	.+30     	; 0x1ebc <u8x8_byte_avr_hw_i2c+0x5e>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    1e9e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    1ea4:	0b c0       	rjmp	.+22     	; 0x1ebc <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	86 89       	ldd	r24, Z+22	; 0x16
    1eaa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    1eb0:	05 c0       	rjmp	.+10     	; 0x1ebc <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    1eb2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    1eb8:	01 c0       	rjmp	.+2      	; 0x1ebc <u8x8_byte_avr_hw_i2c+0x5e>
		default:
			return 0;
	}
	return 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
}
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    1ec4:	6a 32       	cpi	r22, 0x2A	; 42
    1ec6:	11 f1       	breq	.+68     	; 0x1f0c <u8x8_avr_delay+0x48>
    1ec8:	18 f4       	brcc	.+6      	; 0x1ed0 <u8x8_avr_delay+0xc>
    1eca:	69 32       	cpi	r22, 0x29	; 41
    1ecc:	61 f1       	breq	.+88     	; 0x1f26 <u8x8_avr_delay+0x62>
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <u8x8_avr_delay+0x14>
    1ed0:	6b 32       	cpi	r22, 0x2B	; 43
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <u8x8_avr_delay+0x18>
    1ed4:	6c 32       	cpi	r22, 0x2C	; 44
    1ed6:	69 f1       	breq	.+90     	; 0x1f32 <u8x8_avr_delay+0x6e>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    1edc:	24 2f       	mov	r18, r20
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	a4 e6       	ldi	r26, 0x64	; 100
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	0e 94 56 13 	call	0x26ac	; 0x26ac <__umulhisi3>
    1ee8:	28 ef       	ldi	r18, 0xF8	; 248
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	0e 94 34 13 	call	0x2668	; 0x2668 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1ef4:	23 32       	cpi	r18, 0x23	; 35
    1ef6:	f8 f4       	brcc	.+62     	; 0x1f36 <u8x8_avr_delay+0x72>
				break;

			__asm__ __volatile__ (
    1ef8:	82 2f       	mov	r24, r18
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <u8x8_avr_delay+0x36>
			break;
		default:
			return 0;
	}

	return 1;
    1efe:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    1f00:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f02:	95 e3       	ldi	r25, 0x35	; 53
    1f04:	9a 95       	dec	r25
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <u8x8_avr_delay+0x40>
    1f08:	00 00       	nop
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8f ef       	ldi	r24, 0xFF	; 255
    1f0e:	84 0f       	add	r24, r20
    1f10:	41 11       	cpse	r20, r1
    1f12:	f7 cf       	rjmp	.-18     	; 0x1f02 <u8x8_avr_delay+0x3e>
			break;
		default:
			return 0;
	}

	return 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f18:	ef e9       	ldi	r30, 0x9F	; 159
    1f1a:	ff e0       	ldi	r31, 0x0F	; 15
    1f1c:	31 97       	sbiw	r30, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <u8x8_avr_delay+0x58>
    1f20:	00 c0       	rjmp	.+0      	; 0x1f22 <u8x8_avr_delay+0x5e>
    1f22:	00 00       	nop
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    1f24:	48 2f       	mov	r20, r24
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	84 0f       	add	r24, r20
    1f2a:	41 11       	cpse	r20, r1
    1f2c:	f5 cf       	rjmp	.-22     	; 0x1f18 <u8x8_avr_delay+0x54>
			break;
		default:
			return 0;
	}

	return 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	08 95       	ret
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	08 95       	ret
    1f36:	81 e0       	ldi	r24, 0x01	; 1
}
    1f38:	08 95       	ret

00001f3a <calc_duty_cycle>:

// To calculate the duty cycle from the value of the OCRx register
float calc_duty_cycle(void)
{
	#define MAX_VALUE 255/8
	float d = ((OCR0A)/(1.0*(MAX_VALUE))) * 100.0;
    1f3a:	67 b5       	in	r22, 0x27	; 39
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	48 ef       	ldi	r20, 0xF8	; 248
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	48 ec       	ldi	r20, 0xC8	; 200
    1f58:	52 e4       	ldi	r21, 0x42	; 66
    1f5a:	0e 94 c7 12 	call	0x258e	; 0x258e <__mulsf3>
	return d;
}
    1f5e:	08 95       	ret

00001f60 <drawMultiplePWMWaveforms>:

// To draw the square wave
void drawMultiplePWMWaveforms(float dutyCycle, uint8_t numCycles)
{
    1f60:	4f 92       	push	r4
    1f62:	5f 92       	push	r5
    1f64:	6f 92       	push	r6
    1f66:	7f 92       	push	r7
    1f68:	8f 92       	push	r8
    1f6a:	9f 92       	push	r9
    1f6c:	af 92       	push	r10
    1f6e:	bf 92       	push	r11
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	2a 97       	sbiw	r28, 0x0a	; 10
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	6d 83       	std	Y+5, r22	; 0x05
    1f92:	7e 83       	std	Y+6, r23	; 0x06
    1f94:	8f 83       	std	Y+7, r24	; 0x07
    1f96:	98 87       	std	Y+8, r25	; 0x08
    1f98:	4a 87       	std	Y+10, r20	; 0x0a
	u8g2_ClearBuffer(&u8g2);
    1f9a:	8b e9       	ldi	r24, 0x9B	; 155
    1f9c:	95 e0       	ldi	r25, 0x05	; 5
    1f9e:	0e 94 06 04 	call	0x80c	; 0x80c <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_5x8_tf);
    1fa2:	68 e6       	ldi	r22, 0x68	; 104
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	8b e9       	ldi	r24, 0x9B	; 155
    1fa8:	95 e0       	ldi	r25, 0x05	; 5
    1faa:	0e 94 69 08 	call	0x10d2	; 0x10d2 <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    1fae:	8b e9       	ldi	r24, 0x9B	; 155
    1fb0:	95 e0       	ldi	r25, 0x05	; 5
    1fb2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    1fb6:	8b e9       	ldi	r24, 0x9B	; 155
    1fb8:	95 e0       	ldi	r25, 0x05	; 5
    1fba:	0e 94 61 08 	call	0x10c2	; 0x10c2 <u8g2_SetFontPosTop>

	// Calculate the width of each cycle
	float cycleWidth = 128.0 / numCycles;
    1fbe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fc0:	62 2f       	mov	r22, r18
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    1fcc:	9b 01       	movw	r18, r22
    1fce:	ac 01       	movw	r20, r24
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	93 e4       	ldi	r25, 0x43	; 67
    1fd8:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24

	for (uint8_t i = 0; i < numCycles; ++i)
    1fe0:	19 86       	std	Y+9, r1	; 0x09
    1fe2:	7c c0       	rjmp	.+248    	; 0x20dc <drawMultiplePWMWaveforms+0x17c>
	{
		// Define the start of each rising and falling edge
		float startX = i * cycleWidth;
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	68 2e       	mov	r6, r24
    1fe8:	71 2c       	mov	r7, r1
    1fea:	b3 01       	movw	r22, r6
    1fec:	07 2c       	mov	r0, r7
    1fee:	00 0c       	add	r0, r0
    1ff0:	88 0b       	sbc	r24, r24
    1ff2:	99 0b       	sbc	r25, r25
    1ff4:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	c7 01       	movw	r24, r14
    1ffe:	b6 01       	movw	r22, r12
    2000:	0e 94 c7 12 	call	0x258e	; 0x258e <__mulsf3>
    2004:	4b 01       	movw	r8, r22
    2006:	5c 01       	movw	r10, r24
		float endX = (i + 1) * cycleWidth;
    2008:	b3 01       	movw	r22, r6
    200a:	6f 5f       	subi	r22, 0xFF	; 255
    200c:	7f 4f       	sbci	r23, 0xFF	; 255
    200e:	07 2e       	mov	r0, r23
    2010:	00 0c       	add	r0, r0
    2012:	88 0b       	sbc	r24, r24
    2014:	99 0b       	sbc	r25, r25
    2016:	0e 94 3b 12 	call	0x2476	; 0x2476 <__floatsisf>
    201a:	9b 01       	movw	r18, r22
    201c:	ac 01       	movw	r20, r24
    201e:	c7 01       	movw	r24, r14
    2020:	b6 01       	movw	r22, r12
    2022:	0e 94 c7 12 	call	0x258e	; 0x258e <__mulsf3>
    2026:	69 83       	std	Y+1, r22	; 0x01
    2028:	7a 83       	std	Y+2, r23	; 0x02
    202a:	8b 83       	std	Y+3, r24	; 0x03
    202c:	9c 83       	std	Y+4, r25	; 0x04

		// Draw the vertical line
		u8g2_DrawLine(&u8g2, startX, 30, startX, 60);
    202e:	c5 01       	movw	r24, r10
    2030:	b4 01       	movw	r22, r8
    2032:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>
    2036:	0c e3       	ldi	r16, 0x3C	; 60
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	9b 01       	movw	r18, r22
    203c:	4e e1       	ldi	r20, 0x1E	; 30
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	8b e9       	ldi	r24, 0x9B	; 155
    2042:	95 e0       	ldi	r25, 0x05	; 5
    2044:	0e 94 b8 09 	call	0x1370	; 0x1370 <u8g2_DrawLine>

		// Draw the first horizontal line
		u8g2_DrawLine(&u8g2, startX + 1, 30, startX + 1 + (dutyCycle * cycleWidth / 100.0), 30);
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	c5 01       	movw	r24, r10
    2052:	b4 01       	movw	r22, r8
    2054:	0e 94 25 11 	call	0x224a	; 0x224a <__addsf3>
    2058:	4b 01       	movw	r8, r22
    205a:	5c 01       	movw	r10, r24
    205c:	2d 81       	ldd	r18, Y+5	; 0x05
    205e:	3e 81       	ldd	r19, Y+6	; 0x06
    2060:	4f 81       	ldd	r20, Y+7	; 0x07
    2062:	58 85       	ldd	r21, Y+8	; 0x08
    2064:	c7 01       	movw	r24, r14
    2066:	b6 01       	movw	r22, r12
    2068:	0e 94 c7 12 	call	0x258e	; 0x258e <__mulsf3>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	48 ec       	ldi	r20, 0xC8	; 200
    2072:	52 e4       	ldi	r21, 0x42	; 66
    2074:	0e 94 91 11 	call	0x2322	; 0x2322 <__divsf3>
    2078:	9b 01       	movw	r18, r22
    207a:	ac 01       	movw	r20, r24
    207c:	c5 01       	movw	r24, r10
    207e:	b4 01       	movw	r22, r8
    2080:	0e 94 25 11 	call	0x224a	; 0x224a <__addsf3>
    2084:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>
    2088:	2b 01       	movw	r4, r22
    208a:	3c 01       	movw	r6, r24
    208c:	c5 01       	movw	r24, r10
    208e:	b4 01       	movw	r22, r8
    2090:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>
    2094:	0e e1       	ldi	r16, 0x1E	; 30
    2096:	10 e0       	ldi	r17, 0x00	; 0
    2098:	92 01       	movw	r18, r4
    209a:	4e e1       	ldi	r20, 0x1E	; 30
    209c:	50 e0       	ldi	r21, 0x00	; 0
    209e:	8b e9       	ldi	r24, 0x9B	; 155
    20a0:	95 e0       	ldi	r25, 0x05	; 5
    20a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <u8g2_DrawLine>

		// Draw the second vertical line
		u8g2_DrawLine(&u8g2, startX + 1 + (dutyCycle * cycleWidth / 100.0), 30, startX + 1 + (dutyCycle * cycleWidth / 100.0), 60);
    20a6:	0c e3       	ldi	r16, 0x3C	; 60
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	92 01       	movw	r18, r4
    20ac:	4e e1       	ldi	r20, 0x1E	; 30
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	b2 01       	movw	r22, r4
    20b2:	8b e9       	ldi	r24, 0x9B	; 155
    20b4:	95 e0       	ldi	r25, 0x05	; 5
    20b6:	0e 94 b8 09 	call	0x1370	; 0x1370 <u8g2_DrawLine>

		// Draw the second horizontal line
		u8g2_DrawLine(&u8g2, startX + 1 + (dutyCycle * cycleWidth / 100.0), 60, endX, 60);
    20ba:	69 81       	ldd	r22, Y+1	; 0x01
    20bc:	7a 81       	ldd	r23, Y+2	; 0x02
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>
    20c6:	9b 01       	movw	r18, r22
    20c8:	4c e3       	ldi	r20, 0x3C	; 60
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	b2 01       	movw	r22, r4
    20ce:	8b e9       	ldi	r24, 0x9B	; 155
    20d0:	95 e0       	ldi	r25, 0x05	; 5
    20d2:	0e 94 b8 09 	call	0x1370	; 0x1370 <u8g2_DrawLine>
	u8g2_SetFontPosTop(&u8g2);

	// Calculate the width of each cycle
	float cycleWidth = 128.0 / numCycles;

	for (uint8_t i = 0; i < numCycles; ++i)
    20d6:	99 85       	ldd	r25, Y+9	; 0x09
    20d8:	9f 5f       	subi	r25, 0xFF	; 255
    20da:	99 87       	std	Y+9, r25	; 0x09
    20dc:	29 85       	ldd	r18, Y+9	; 0x09
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	28 17       	cp	r18, r24
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <drawMultiplePWMWaveforms+0x186>
    20e4:	7f cf       	rjmp	.-258    	; 0x1fe4 <drawMultiplePWMWaveforms+0x84>

		// Draw the second horizontal line
		u8g2_DrawLine(&u8g2, startX + 1 + (dutyCycle * cycleWidth / 100.0), 60, endX, 60);
	}

	u8g2_SendBuffer(&u8g2);
    20e6:	8b e9       	ldi	r24, 0x9B	; 155
    20e8:	95 e0       	ldi	r25, 0x05	; 5
    20ea:	0e 94 1c 04 	call	0x838	; 0x838 <u8g2_SendBuffer>
}
    20ee:	2a 96       	adiw	r28, 0x0a	; 10
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	df 90       	pop	r13
    2108:	cf 90       	pop	r12
    210a:	bf 90       	pop	r11
    210c:	af 90       	pop	r10
    210e:	9f 90       	pop	r9
    2110:	8f 90       	pop	r8
    2112:	7f 90       	pop	r7
    2114:	6f 90       	pop	r6
    2116:	5f 90       	pop	r5
    2118:	4f 90       	pop	r4
    211a:	08 95       	ret

0000211c <main>:

int main(void)
{
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	64 97       	sbiw	r28, 0x14	; 20
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    2130:	22 e6       	ldi	r18, 0x62	; 98
    2132:	3f e0       	ldi	r19, 0x0F	; 15
    2134:	4f e2       	ldi	r20, 0x2F	; 47
    2136:	5f e0       	ldi	r21, 0x0F	; 15
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	71 e0       	ldi	r23, 0x01	; 1
    213c:	8b e9       	ldi	r24, 0x9B	; 155
    213e:	95 e0       	ldi	r25, 0x05	; 5
    2140:	0e 94 2d 04 	call	0x85a	; 0x85a <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    2144:	88 e7       	ldi	r24, 0x78	; 120
    2146:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    214a:	8b e9       	ldi	r24, 0x9B	; 155
    214c:	95 e0       	ldi	r25, 0x05	; 5
    214e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    2152:	60 e0       	ldi	r22, 0x00	; 0
    2154:	8b e9       	ldi	r24, 0x9B	; 155
    2156:	95 e0       	ldi	r25, 0x05	; 5
    2158:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <u8x8_SetPowerSave>

	adc_init();
    215c:	0e 94 ad 03 	call	0x75a	; 0x75a <adc_init>
	initPWM();
    2160:	0e 94 0a 11 	call	0x2214	; 0x2214 <initPWM>

	while (1)
	{
		uint16_t adc_value = adc_read();
    2164:	0e 94 b8 03 	call	0x770	; 0x770 <adc_read>
		setPWMDutyCycle(adc_value);
    2168:	0e 94 15 11 	call	0x222a	; 0x222a <setPWMDutyCycle>
		float dutyCycle = calc_duty_cycle();
    216c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <calc_duty_cycle>
    2170:	6b 01       	movw	r12, r22
    2172:	7c 01       	movw	r14, r24

		char buffer2[20];
		itoa(dutyCycle, buffer2, 10);
    2174:	0e 94 03 12 	call	0x2406	; 0x2406 <__fixsfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    217c:	4a e0       	ldi	r20, 0x0A	; 10
    217e:	be 01       	movw	r22, r28
    2180:	6f 5f       	subi	r22, 0xFF	; 255
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__itoa_ncheck>

		// Display 5 cycles simultaneously
		drawMultiplePWMWaveforms(dutyCycle, 5);
    2188:	45 e0       	ldi	r20, 0x05	; 5
    218a:	c7 01       	movw	r24, r14
    218c:	b6 01       	movw	r22, r12
    218e:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <drawMultiplePWMWaveforms>
		//_delay_ms(100);  
		
		u8g2_DrawStr(&u8g2, 15, 10, "Time: 0.25 milli-sec");
    2192:	2b e6       	ldi	r18, 0x6B	; 107
    2194:	31 e0       	ldi	r19, 0x01	; 1
    2196:	4a e0       	ldi	r20, 0x0A	; 10
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	6f e0       	ldi	r22, 0x0F	; 15
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	8b e9       	ldi	r24, 0x9B	; 155
    21a0:	95 e0       	ldi	r25, 0x05	; 5
    21a2:	0e 94 04 08 	call	0x1008	; 0x1008 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 0, 0, "F: 3.9 kHz ");
    21a6:	20 e8       	ldi	r18, 0x80	; 128
    21a8:	31 e0       	ldi	r19, 0x01	; 1
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	8b e9       	ldi	r24, 0x9B	; 155
    21b4:	95 e0       	ldi	r25, 0x05	; 5
    21b6:	0e 94 04 08 	call	0x1008	; 0x1008 <u8g2_DrawStr>
		//u8g2_DrawStr(&u8g2, 10, 0, "3.9 ");
		//u8g2_DrawStr(&u8g2, 17, 0, "kHz");
		u8g2_DrawStr(&u8g2, 55, 0, "Duty Cycle:");
    21ba:	2c e8       	ldi	r18, 0x8C	; 140
    21bc:	31 e0       	ldi	r19, 0x01	; 1
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	67 e3       	ldi	r22, 0x37	; 55
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	8b e9       	ldi	r24, 0x9B	; 155
    21c8:	95 e0       	ldi	r25, 0x05	; 5
    21ca:	0e 94 04 08 	call	0x1008	; 0x1008 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 110, 0, buffer2);
    21ce:	9e 01       	movw	r18, r28
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	6e e6       	ldi	r22, 0x6E	; 110
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	8b e9       	ldi	r24, 0x9B	; 155
    21de:	95 e0       	ldi	r25, 0x05	; 5
    21e0:	0e 94 04 08 	call	0x1008	; 0x1008 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 124, 0, "%");
    21e4:	28 e9       	ldi	r18, 0x98	; 152
    21e6:	31 e0       	ldi	r19, 0x01	; 1
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	6c e7       	ldi	r22, 0x7C	; 124
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	8b e9       	ldi	r24, 0x9B	; 155
    21f2:	95 e0       	ldi	r25, 0x05	; 5
    21f4:	0e 94 04 08 	call	0x1008	; 0x1008 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
    21f8:	8b e9       	ldi	r24, 0x9B	; 155
    21fa:	95 e0       	ldi	r25, 0x05	; 5
    21fc:	0e 94 1c 04 	call	0x838	; 0x838 <u8g2_SendBuffer>
    2200:	2f ef       	ldi	r18, 0xFF	; 255
    2202:	81 ee       	ldi	r24, 0xE1	; 225
    2204:	94 e0       	ldi	r25, 0x04	; 4
    2206:	21 50       	subi	r18, 0x01	; 1
    2208:	80 40       	sbci	r24, 0x00	; 0
    220a:	90 40       	sbci	r25, 0x00	; 0
    220c:	e1 f7       	brne	.-8      	; 0x2206 <main+0xea>
    220e:	00 c0       	rjmp	.+0      	; 0x2210 <main+0xf4>
    2210:	00 00       	nop
    2212:	a8 cf       	rjmp	.-176    	; 0x2164 <main+0x48>

00002214 <initPWM>:
#include "Timer.h"

void initPWM()
{
	// Set OC0A (Pin 6, PD6) as output
	DDRD |= (1 << PD6);
    2214:	8a b1       	in	r24, 0x0a	; 10
    2216:	80 64       	ori	r24, 0x40	; 64
    2218:	8a b9       	out	0x0a, r24	; 10

	// Set Timer0 in Normal mode
	TCCR0A = 0x00;
    221a:	14 bc       	out	0x24, r1	; 36

	// Set prescaler to 8
	TCCR0B = (1 << CS02) | (1 << CS01) | (0 << CS00);
    221c:	86 e0       	ldi	r24, 0x06	; 6
    221e:	85 bd       	out	0x25, r24	; 37

	// Enable Phase Correct PWM mode, non-inverting output on OC0A
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (0 << COM0A0) | (1 << COM0A1);
    2220:	84 b5       	in	r24, 0x24	; 36
    2222:	83 68       	ori	r24, 0x83	; 131
    2224:	84 bd       	out	0x24, r24	; 36

	// Initial duty cycle = 0%
	OCR0A = 0;
    2226:	17 bc       	out	0x27, r1	; 39
    2228:	08 95       	ret

0000222a <setPWMDutyCycle>:
}

void setPWMDutyCycle(uint16_t value)
{
	// Calculate the corresponding PWM value for the given duty cycle
	uint16_t pwmValue = (255.0/8192.0) * (uint16_t) value;
    222a:	bc 01       	movw	r22, r24
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	0e 94 39 12 	call	0x2472	; 0x2472 <__floatunsisf>
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4f ef       	ldi	r20, 0xFF	; 255
    223a:	5c e3       	ldi	r21, 0x3C	; 60
    223c:	0e 94 c7 12 	call	0x258e	; 0x258e <__mulsf3>
    2240:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>

	// Set the OCR0A register with the calculated PWM value
	OCR0A = (uint8_t)pwmValue;
    2244:	67 bd       	out	0x27, r22	; 39
    2246:	08 95       	ret

00002248 <__subsf3>:
    2248:	50 58       	subi	r21, 0x80	; 128

0000224a <__addsf3>:
    224a:	bb 27       	eor	r27, r27
    224c:	aa 27       	eor	r26, r26
    224e:	0e 94 3c 11 	call	0x2278	; 0x2278 <__addsf3x>
    2252:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__fp_round>
    2256:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__fp_pscA>
    225a:	38 f0       	brcs	.+14     	; 0x226a <__addsf3+0x20>
    225c:	0e 94 86 12 	call	0x250c	; 0x250c <__fp_pscB>
    2260:	20 f0       	brcs	.+8      	; 0x226a <__addsf3+0x20>
    2262:	39 f4       	brne	.+14     	; 0x2272 <__addsf3+0x28>
    2264:	9f 3f       	cpi	r25, 0xFF	; 255
    2266:	19 f4       	brne	.+6      	; 0x226e <__addsf3+0x24>
    2268:	26 f4       	brtc	.+8      	; 0x2272 <__addsf3+0x28>
    226a:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_nan>
    226e:	0e f4       	brtc	.+2      	; 0x2272 <__addsf3+0x28>
    2270:	e0 95       	com	r30
    2272:	e7 fb       	bst	r30, 7
    2274:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__fp_inf>

00002278 <__addsf3x>:
    2278:	e9 2f       	mov	r30, r25
    227a:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_split3>
    227e:	58 f3       	brcs	.-42     	; 0x2256 <__addsf3+0xc>
    2280:	ba 17       	cp	r27, r26
    2282:	62 07       	cpc	r22, r18
    2284:	73 07       	cpc	r23, r19
    2286:	84 07       	cpc	r24, r20
    2288:	95 07       	cpc	r25, r21
    228a:	20 f0       	brcs	.+8      	; 0x2294 <__addsf3x+0x1c>
    228c:	79 f4       	brne	.+30     	; 0x22ac <__addsf3x+0x34>
    228e:	a6 f5       	brtc	.+104    	; 0x22f8 <__addsf3x+0x80>
    2290:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_zero>
    2294:	0e f4       	brtc	.+2      	; 0x2298 <__addsf3x+0x20>
    2296:	e0 95       	com	r30
    2298:	0b 2e       	mov	r0, r27
    229a:	ba 2f       	mov	r27, r26
    229c:	a0 2d       	mov	r26, r0
    229e:	0b 01       	movw	r0, r22
    22a0:	b9 01       	movw	r22, r18
    22a2:	90 01       	movw	r18, r0
    22a4:	0c 01       	movw	r0, r24
    22a6:	ca 01       	movw	r24, r20
    22a8:	a0 01       	movw	r20, r0
    22aa:	11 24       	eor	r1, r1
    22ac:	ff 27       	eor	r31, r31
    22ae:	59 1b       	sub	r21, r25
    22b0:	99 f0       	breq	.+38     	; 0x22d8 <__addsf3x+0x60>
    22b2:	59 3f       	cpi	r21, 0xF9	; 249
    22b4:	50 f4       	brcc	.+20     	; 0x22ca <__addsf3x+0x52>
    22b6:	50 3e       	cpi	r21, 0xE0	; 224
    22b8:	68 f1       	brcs	.+90     	; 0x2314 <__addsf3x+0x9c>
    22ba:	1a 16       	cp	r1, r26
    22bc:	f0 40       	sbci	r31, 0x00	; 0
    22be:	a2 2f       	mov	r26, r18
    22c0:	23 2f       	mov	r18, r19
    22c2:	34 2f       	mov	r19, r20
    22c4:	44 27       	eor	r20, r20
    22c6:	58 5f       	subi	r21, 0xF8	; 248
    22c8:	f3 cf       	rjmp	.-26     	; 0x22b0 <__addsf3x+0x38>
    22ca:	46 95       	lsr	r20
    22cc:	37 95       	ror	r19
    22ce:	27 95       	ror	r18
    22d0:	a7 95       	ror	r26
    22d2:	f0 40       	sbci	r31, 0x00	; 0
    22d4:	53 95       	inc	r21
    22d6:	c9 f7       	brne	.-14     	; 0x22ca <__addsf3x+0x52>
    22d8:	7e f4       	brtc	.+30     	; 0x22f8 <__addsf3x+0x80>
    22da:	1f 16       	cp	r1, r31
    22dc:	ba 0b       	sbc	r27, r26
    22de:	62 0b       	sbc	r22, r18
    22e0:	73 0b       	sbc	r23, r19
    22e2:	84 0b       	sbc	r24, r20
    22e4:	ba f0       	brmi	.+46     	; 0x2314 <__addsf3x+0x9c>
    22e6:	91 50       	subi	r25, 0x01	; 1
    22e8:	a1 f0       	breq	.+40     	; 0x2312 <__addsf3x+0x9a>
    22ea:	ff 0f       	add	r31, r31
    22ec:	bb 1f       	adc	r27, r27
    22ee:	66 1f       	adc	r22, r22
    22f0:	77 1f       	adc	r23, r23
    22f2:	88 1f       	adc	r24, r24
    22f4:	c2 f7       	brpl	.-16     	; 0x22e6 <__addsf3x+0x6e>
    22f6:	0e c0       	rjmp	.+28     	; 0x2314 <__addsf3x+0x9c>
    22f8:	ba 0f       	add	r27, r26
    22fa:	62 1f       	adc	r22, r18
    22fc:	73 1f       	adc	r23, r19
    22fe:	84 1f       	adc	r24, r20
    2300:	48 f4       	brcc	.+18     	; 0x2314 <__addsf3x+0x9c>
    2302:	87 95       	ror	r24
    2304:	77 95       	ror	r23
    2306:	67 95       	ror	r22
    2308:	b7 95       	ror	r27
    230a:	f7 95       	ror	r31
    230c:	9e 3f       	cpi	r25, 0xFE	; 254
    230e:	08 f0       	brcs	.+2      	; 0x2312 <__addsf3x+0x9a>
    2310:	b0 cf       	rjmp	.-160    	; 0x2272 <__addsf3+0x28>
    2312:	93 95       	inc	r25
    2314:	88 0f       	add	r24, r24
    2316:	08 f0       	brcs	.+2      	; 0x231a <__addsf3x+0xa2>
    2318:	99 27       	eor	r25, r25
    231a:	ee 0f       	add	r30, r30
    231c:	97 95       	ror	r25
    231e:	87 95       	ror	r24
    2320:	08 95       	ret

00002322 <__divsf3>:
    2322:	0e 94 a5 11 	call	0x234a	; 0x234a <__divsf3x>
    2326:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__fp_round>
    232a:	0e 94 86 12 	call	0x250c	; 0x250c <__fp_pscB>
    232e:	58 f0       	brcs	.+22     	; 0x2346 <__divsf3+0x24>
    2330:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__fp_pscA>
    2334:	40 f0       	brcs	.+16     	; 0x2346 <__divsf3+0x24>
    2336:	29 f4       	brne	.+10     	; 0x2342 <__divsf3+0x20>
    2338:	5f 3f       	cpi	r21, 0xFF	; 255
    233a:	29 f0       	breq	.+10     	; 0x2346 <__divsf3+0x24>
    233c:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__fp_inf>
    2340:	51 11       	cpse	r21, r1
    2342:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_szero>
    2346:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_nan>

0000234a <__divsf3x>:
    234a:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_split3>
    234e:	68 f3       	brcs	.-38     	; 0x232a <__divsf3+0x8>

00002350 <__divsf3_pse>:
    2350:	99 23       	and	r25, r25
    2352:	b1 f3       	breq	.-20     	; 0x2340 <__divsf3+0x1e>
    2354:	55 23       	and	r21, r21
    2356:	91 f3       	breq	.-28     	; 0x233c <__divsf3+0x1a>
    2358:	95 1b       	sub	r25, r21
    235a:	55 0b       	sbc	r21, r21
    235c:	bb 27       	eor	r27, r27
    235e:	aa 27       	eor	r26, r26
    2360:	62 17       	cp	r22, r18
    2362:	73 07       	cpc	r23, r19
    2364:	84 07       	cpc	r24, r20
    2366:	38 f0       	brcs	.+14     	; 0x2376 <__divsf3_pse+0x26>
    2368:	9f 5f       	subi	r25, 0xFF	; 255
    236a:	5f 4f       	sbci	r21, 0xFF	; 255
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	44 1f       	adc	r20, r20
    2372:	aa 1f       	adc	r26, r26
    2374:	a9 f3       	breq	.-22     	; 0x2360 <__divsf3_pse+0x10>
    2376:	35 d0       	rcall	.+106    	; 0x23e2 <__divsf3_pse+0x92>
    2378:	0e 2e       	mov	r0, r30
    237a:	3a f0       	brmi	.+14     	; 0x238a <__divsf3_pse+0x3a>
    237c:	e0 e8       	ldi	r30, 0x80	; 128
    237e:	32 d0       	rcall	.+100    	; 0x23e4 <__divsf3_pse+0x94>
    2380:	91 50       	subi	r25, 0x01	; 1
    2382:	50 40       	sbci	r21, 0x00	; 0
    2384:	e6 95       	lsr	r30
    2386:	00 1c       	adc	r0, r0
    2388:	ca f7       	brpl	.-14     	; 0x237c <__divsf3_pse+0x2c>
    238a:	2b d0       	rcall	.+86     	; 0x23e2 <__divsf3_pse+0x92>
    238c:	fe 2f       	mov	r31, r30
    238e:	29 d0       	rcall	.+82     	; 0x23e2 <__divsf3_pse+0x92>
    2390:	66 0f       	add	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	bb 1f       	adc	r27, r27
    2398:	26 17       	cp	r18, r22
    239a:	37 07       	cpc	r19, r23
    239c:	48 07       	cpc	r20, r24
    239e:	ab 07       	cpc	r26, r27
    23a0:	b0 e8       	ldi	r27, 0x80	; 128
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <__divsf3_pse+0x56>
    23a4:	bb 0b       	sbc	r27, r27
    23a6:	80 2d       	mov	r24, r0
    23a8:	bf 01       	movw	r22, r30
    23aa:	ff 27       	eor	r31, r31
    23ac:	93 58       	subi	r25, 0x83	; 131
    23ae:	5f 4f       	sbci	r21, 0xFF	; 255
    23b0:	3a f0       	brmi	.+14     	; 0x23c0 <__divsf3_pse+0x70>
    23b2:	9e 3f       	cpi	r25, 0xFE	; 254
    23b4:	51 05       	cpc	r21, r1
    23b6:	78 f0       	brcs	.+30     	; 0x23d6 <__divsf3_pse+0x86>
    23b8:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__fp_inf>
    23bc:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_szero>
    23c0:	5f 3f       	cpi	r21, 0xFF	; 255
    23c2:	e4 f3       	brlt	.-8      	; 0x23bc <__divsf3_pse+0x6c>
    23c4:	98 3e       	cpi	r25, 0xE8	; 232
    23c6:	d4 f3       	brlt	.-12     	; 0x23bc <__divsf3_pse+0x6c>
    23c8:	86 95       	lsr	r24
    23ca:	77 95       	ror	r23
    23cc:	67 95       	ror	r22
    23ce:	b7 95       	ror	r27
    23d0:	f7 95       	ror	r31
    23d2:	9f 5f       	subi	r25, 0xFF	; 255
    23d4:	c9 f7       	brne	.-14     	; 0x23c8 <__divsf3_pse+0x78>
    23d6:	88 0f       	add	r24, r24
    23d8:	91 1d       	adc	r25, r1
    23da:	96 95       	lsr	r25
    23dc:	87 95       	ror	r24
    23de:	97 f9       	bld	r25, 7
    23e0:	08 95       	ret
    23e2:	e1 e0       	ldi	r30, 0x01	; 1
    23e4:	66 0f       	add	r22, r22
    23e6:	77 1f       	adc	r23, r23
    23e8:	88 1f       	adc	r24, r24
    23ea:	bb 1f       	adc	r27, r27
    23ec:	62 17       	cp	r22, r18
    23ee:	73 07       	cpc	r23, r19
    23f0:	84 07       	cpc	r24, r20
    23f2:	ba 07       	cpc	r27, r26
    23f4:	20 f0       	brcs	.+8      	; 0x23fe <__divsf3_pse+0xae>
    23f6:	62 1b       	sub	r22, r18
    23f8:	73 0b       	sbc	r23, r19
    23fa:	84 0b       	sbc	r24, r20
    23fc:	ba 0b       	sbc	r27, r26
    23fe:	ee 1f       	adc	r30, r30
    2400:	88 f7       	brcc	.-30     	; 0x23e4 <__divsf3_pse+0x94>
    2402:	e0 95       	com	r30
    2404:	08 95       	ret

00002406 <__fixsfsi>:
    2406:	0e 94 0a 12 	call	0x2414	; 0x2414 <__fixunssfsi>
    240a:	68 94       	set
    240c:	b1 11       	cpse	r27, r1
    240e:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_szero>
    2412:	08 95       	ret

00002414 <__fixunssfsi>:
    2414:	0e 94 a6 12 	call	0x254c	; 0x254c <__fp_splitA>
    2418:	88 f0       	brcs	.+34     	; 0x243c <__fixunssfsi+0x28>
    241a:	9f 57       	subi	r25, 0x7F	; 127
    241c:	98 f0       	brcs	.+38     	; 0x2444 <__fixunssfsi+0x30>
    241e:	b9 2f       	mov	r27, r25
    2420:	99 27       	eor	r25, r25
    2422:	b7 51       	subi	r27, 0x17	; 23
    2424:	b0 f0       	brcs	.+44     	; 0x2452 <__fixunssfsi+0x3e>
    2426:	e1 f0       	breq	.+56     	; 0x2460 <__fixunssfsi+0x4c>
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	1a f0       	brmi	.+6      	; 0x2438 <__fixunssfsi+0x24>
    2432:	ba 95       	dec	r27
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__fixunssfsi+0x14>
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <__fixunssfsi+0x4c>
    2438:	b1 30       	cpi	r27, 0x01	; 1
    243a:	91 f0       	breq	.+36     	; 0x2460 <__fixunssfsi+0x4c>
    243c:	0e 94 c0 12 	call	0x2580	; 0x2580 <__fp_zero>
    2440:	b1 e0       	ldi	r27, 0x01	; 1
    2442:	08 95       	ret
    2444:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__fp_zero>
    2448:	67 2f       	mov	r22, r23
    244a:	78 2f       	mov	r23, r24
    244c:	88 27       	eor	r24, r24
    244e:	b8 5f       	subi	r27, 0xF8	; 248
    2450:	39 f0       	breq	.+14     	; 0x2460 <__fixunssfsi+0x4c>
    2452:	b9 3f       	cpi	r27, 0xF9	; 249
    2454:	cc f3       	brlt	.-14     	; 0x2448 <__fixunssfsi+0x34>
    2456:	86 95       	lsr	r24
    2458:	77 95       	ror	r23
    245a:	67 95       	ror	r22
    245c:	b3 95       	inc	r27
    245e:	d9 f7       	brne	.-10     	; 0x2456 <__fixunssfsi+0x42>
    2460:	3e f4       	brtc	.+14     	; 0x2470 <__fixunssfsi+0x5c>
    2462:	90 95       	com	r25
    2464:	80 95       	com	r24
    2466:	70 95       	com	r23
    2468:	61 95       	neg	r22
    246a:	7f 4f       	sbci	r23, 0xFF	; 255
    246c:	8f 4f       	sbci	r24, 0xFF	; 255
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	08 95       	ret

00002472 <__floatunsisf>:
    2472:	e8 94       	clt
    2474:	09 c0       	rjmp	.+18     	; 0x2488 <__floatsisf+0x12>

00002476 <__floatsisf>:
    2476:	97 fb       	bst	r25, 7
    2478:	3e f4       	brtc	.+14     	; 0x2488 <__floatsisf+0x12>
    247a:	90 95       	com	r25
    247c:	80 95       	com	r24
    247e:	70 95       	com	r23
    2480:	61 95       	neg	r22
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	99 23       	and	r25, r25
    248a:	a9 f0       	breq	.+42     	; 0x24b6 <__floatsisf+0x40>
    248c:	f9 2f       	mov	r31, r25
    248e:	96 e9       	ldi	r25, 0x96	; 150
    2490:	bb 27       	eor	r27, r27
    2492:	93 95       	inc	r25
    2494:	f6 95       	lsr	r31
    2496:	87 95       	ror	r24
    2498:	77 95       	ror	r23
    249a:	67 95       	ror	r22
    249c:	b7 95       	ror	r27
    249e:	f1 11       	cpse	r31, r1
    24a0:	f8 cf       	rjmp	.-16     	; 0x2492 <__floatsisf+0x1c>
    24a2:	fa f4       	brpl	.+62     	; 0x24e2 <__floatsisf+0x6c>
    24a4:	bb 0f       	add	r27, r27
    24a6:	11 f4       	brne	.+4      	; 0x24ac <__floatsisf+0x36>
    24a8:	60 ff       	sbrs	r22, 0
    24aa:	1b c0       	rjmp	.+54     	; 0x24e2 <__floatsisf+0x6c>
    24ac:	6f 5f       	subi	r22, 0xFF	; 255
    24ae:	7f 4f       	sbci	r23, 0xFF	; 255
    24b0:	8f 4f       	sbci	r24, 0xFF	; 255
    24b2:	9f 4f       	sbci	r25, 0xFF	; 255
    24b4:	16 c0       	rjmp	.+44     	; 0x24e2 <__floatsisf+0x6c>
    24b6:	88 23       	and	r24, r24
    24b8:	11 f0       	breq	.+4      	; 0x24be <__floatsisf+0x48>
    24ba:	96 e9       	ldi	r25, 0x96	; 150
    24bc:	11 c0       	rjmp	.+34     	; 0x24e0 <__floatsisf+0x6a>
    24be:	77 23       	and	r23, r23
    24c0:	21 f0       	breq	.+8      	; 0x24ca <__floatsisf+0x54>
    24c2:	9e e8       	ldi	r25, 0x8E	; 142
    24c4:	87 2f       	mov	r24, r23
    24c6:	76 2f       	mov	r23, r22
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <__floatsisf+0x5e>
    24ca:	66 23       	and	r22, r22
    24cc:	71 f0       	breq	.+28     	; 0x24ea <__floatsisf+0x74>
    24ce:	96 e8       	ldi	r25, 0x86	; 134
    24d0:	86 2f       	mov	r24, r22
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	2a f0       	brmi	.+10     	; 0x24e2 <__floatsisf+0x6c>
    24d8:	9a 95       	dec	r25
    24da:	66 0f       	add	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	da f7       	brpl	.-10     	; 0x24d8 <__floatsisf+0x62>
    24e2:	88 0f       	add	r24, r24
    24e4:	96 95       	lsr	r25
    24e6:	87 95       	ror	r24
    24e8:	97 f9       	bld	r25, 7
    24ea:	08 95       	ret

000024ec <__fp_inf>:
    24ec:	97 f9       	bld	r25, 7
    24ee:	9f 67       	ori	r25, 0x7F	; 127
    24f0:	80 e8       	ldi	r24, 0x80	; 128
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	08 95       	ret

000024f8 <__fp_nan>:
    24f8:	9f ef       	ldi	r25, 0xFF	; 255
    24fa:	80 ec       	ldi	r24, 0xC0	; 192
    24fc:	08 95       	ret

000024fe <__fp_pscA>:
    24fe:	00 24       	eor	r0, r0
    2500:	0a 94       	dec	r0
    2502:	16 16       	cp	r1, r22
    2504:	17 06       	cpc	r1, r23
    2506:	18 06       	cpc	r1, r24
    2508:	09 06       	cpc	r0, r25
    250a:	08 95       	ret

0000250c <__fp_pscB>:
    250c:	00 24       	eor	r0, r0
    250e:	0a 94       	dec	r0
    2510:	12 16       	cp	r1, r18
    2512:	13 06       	cpc	r1, r19
    2514:	14 06       	cpc	r1, r20
    2516:	05 06       	cpc	r0, r21
    2518:	08 95       	ret

0000251a <__fp_round>:
    251a:	09 2e       	mov	r0, r25
    251c:	03 94       	inc	r0
    251e:	00 0c       	add	r0, r0
    2520:	11 f4       	brne	.+4      	; 0x2526 <__fp_round+0xc>
    2522:	88 23       	and	r24, r24
    2524:	52 f0       	brmi	.+20     	; 0x253a <__fp_round+0x20>
    2526:	bb 0f       	add	r27, r27
    2528:	40 f4       	brcc	.+16     	; 0x253a <__fp_round+0x20>
    252a:	bf 2b       	or	r27, r31
    252c:	11 f4       	brne	.+4      	; 0x2532 <__fp_round+0x18>
    252e:	60 ff       	sbrs	r22, 0
    2530:	04 c0       	rjmp	.+8      	; 0x253a <__fp_round+0x20>
    2532:	6f 5f       	subi	r22, 0xFF	; 255
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	8f 4f       	sbci	r24, 0xFF	; 255
    2538:	9f 4f       	sbci	r25, 0xFF	; 255
    253a:	08 95       	ret

0000253c <__fp_split3>:
    253c:	57 fd       	sbrc	r21, 7
    253e:	90 58       	subi	r25, 0x80	; 128
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	59 f0       	breq	.+22     	; 0x255c <__fp_splitA+0x10>
    2546:	5f 3f       	cpi	r21, 0xFF	; 255
    2548:	71 f0       	breq	.+28     	; 0x2566 <__fp_splitA+0x1a>
    254a:	47 95       	ror	r20

0000254c <__fp_splitA>:
    254c:	88 0f       	add	r24, r24
    254e:	97 fb       	bst	r25, 7
    2550:	99 1f       	adc	r25, r25
    2552:	61 f0       	breq	.+24     	; 0x256c <__fp_splitA+0x20>
    2554:	9f 3f       	cpi	r25, 0xFF	; 255
    2556:	79 f0       	breq	.+30     	; 0x2576 <__fp_splitA+0x2a>
    2558:	87 95       	ror	r24
    255a:	08 95       	ret
    255c:	12 16       	cp	r1, r18
    255e:	13 06       	cpc	r1, r19
    2560:	14 06       	cpc	r1, r20
    2562:	55 1f       	adc	r21, r21
    2564:	f2 cf       	rjmp	.-28     	; 0x254a <__fp_split3+0xe>
    2566:	46 95       	lsr	r20
    2568:	f1 df       	rcall	.-30     	; 0x254c <__fp_splitA>
    256a:	08 c0       	rjmp	.+16     	; 0x257c <__fp_splitA+0x30>
    256c:	16 16       	cp	r1, r22
    256e:	17 06       	cpc	r1, r23
    2570:	18 06       	cpc	r1, r24
    2572:	99 1f       	adc	r25, r25
    2574:	f1 cf       	rjmp	.-30     	; 0x2558 <__fp_splitA+0xc>
    2576:	86 95       	lsr	r24
    2578:	71 05       	cpc	r23, r1
    257a:	61 05       	cpc	r22, r1
    257c:	08 94       	sec
    257e:	08 95       	ret

00002580 <__fp_zero>:
    2580:	e8 94       	clt

00002582 <__fp_szero>:
    2582:	bb 27       	eor	r27, r27
    2584:	66 27       	eor	r22, r22
    2586:	77 27       	eor	r23, r23
    2588:	cb 01       	movw	r24, r22
    258a:	97 f9       	bld	r25, 7
    258c:	08 95       	ret

0000258e <__mulsf3>:
    258e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <__mulsf3x>
    2592:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__fp_round>
    2596:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__fp_pscA>
    259a:	38 f0       	brcs	.+14     	; 0x25aa <__mulsf3+0x1c>
    259c:	0e 94 86 12 	call	0x250c	; 0x250c <__fp_pscB>
    25a0:	20 f0       	brcs	.+8      	; 0x25aa <__mulsf3+0x1c>
    25a2:	95 23       	and	r25, r21
    25a4:	11 f0       	breq	.+4      	; 0x25aa <__mulsf3+0x1c>
    25a6:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__fp_inf>
    25aa:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__fp_nan>
    25ae:	11 24       	eor	r1, r1
    25b0:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_szero>

000025b4 <__mulsf3x>:
    25b4:	0e 94 9e 12 	call	0x253c	; 0x253c <__fp_split3>
    25b8:	70 f3       	brcs	.-36     	; 0x2596 <__mulsf3+0x8>

000025ba <__mulsf3_pse>:
    25ba:	95 9f       	mul	r25, r21
    25bc:	c1 f3       	breq	.-16     	; 0x25ae <__mulsf3+0x20>
    25be:	95 0f       	add	r25, r21
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	55 1f       	adc	r21, r21
    25c4:	62 9f       	mul	r22, r18
    25c6:	f0 01       	movw	r30, r0
    25c8:	72 9f       	mul	r23, r18
    25ca:	bb 27       	eor	r27, r27
    25cc:	f0 0d       	add	r31, r0
    25ce:	b1 1d       	adc	r27, r1
    25d0:	63 9f       	mul	r22, r19
    25d2:	aa 27       	eor	r26, r26
    25d4:	f0 0d       	add	r31, r0
    25d6:	b1 1d       	adc	r27, r1
    25d8:	aa 1f       	adc	r26, r26
    25da:	64 9f       	mul	r22, r20
    25dc:	66 27       	eor	r22, r22
    25de:	b0 0d       	add	r27, r0
    25e0:	a1 1d       	adc	r26, r1
    25e2:	66 1f       	adc	r22, r22
    25e4:	82 9f       	mul	r24, r18
    25e6:	22 27       	eor	r18, r18
    25e8:	b0 0d       	add	r27, r0
    25ea:	a1 1d       	adc	r26, r1
    25ec:	62 1f       	adc	r22, r18
    25ee:	73 9f       	mul	r23, r19
    25f0:	b0 0d       	add	r27, r0
    25f2:	a1 1d       	adc	r26, r1
    25f4:	62 1f       	adc	r22, r18
    25f6:	83 9f       	mul	r24, r19
    25f8:	a0 0d       	add	r26, r0
    25fa:	61 1d       	adc	r22, r1
    25fc:	22 1f       	adc	r18, r18
    25fe:	74 9f       	mul	r23, r20
    2600:	33 27       	eor	r19, r19
    2602:	a0 0d       	add	r26, r0
    2604:	61 1d       	adc	r22, r1
    2606:	23 1f       	adc	r18, r19
    2608:	84 9f       	mul	r24, r20
    260a:	60 0d       	add	r22, r0
    260c:	21 1d       	adc	r18, r1
    260e:	82 2f       	mov	r24, r18
    2610:	76 2f       	mov	r23, r22
    2612:	6a 2f       	mov	r22, r26
    2614:	11 24       	eor	r1, r1
    2616:	9f 57       	subi	r25, 0x7F	; 127
    2618:	50 40       	sbci	r21, 0x00	; 0
    261a:	9a f0       	brmi	.+38     	; 0x2642 <__mulsf3_pse+0x88>
    261c:	f1 f0       	breq	.+60     	; 0x265a <__mulsf3_pse+0xa0>
    261e:	88 23       	and	r24, r24
    2620:	4a f0       	brmi	.+18     	; 0x2634 <__mulsf3_pse+0x7a>
    2622:	ee 0f       	add	r30, r30
    2624:	ff 1f       	adc	r31, r31
    2626:	bb 1f       	adc	r27, r27
    2628:	66 1f       	adc	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	88 1f       	adc	r24, r24
    262e:	91 50       	subi	r25, 0x01	; 1
    2630:	50 40       	sbci	r21, 0x00	; 0
    2632:	a9 f7       	brne	.-22     	; 0x261e <__mulsf3_pse+0x64>
    2634:	9e 3f       	cpi	r25, 0xFE	; 254
    2636:	51 05       	cpc	r21, r1
    2638:	80 f0       	brcs	.+32     	; 0x265a <__mulsf3_pse+0xa0>
    263a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__fp_inf>
    263e:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__fp_szero>
    2642:	5f 3f       	cpi	r21, 0xFF	; 255
    2644:	e4 f3       	brlt	.-8      	; 0x263e <__mulsf3_pse+0x84>
    2646:	98 3e       	cpi	r25, 0xE8	; 232
    2648:	d4 f3       	brlt	.-12     	; 0x263e <__mulsf3_pse+0x84>
    264a:	86 95       	lsr	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	b7 95       	ror	r27
    2652:	f7 95       	ror	r31
    2654:	e7 95       	ror	r30
    2656:	9f 5f       	subi	r25, 0xFF	; 255
    2658:	c1 f7       	brne	.-16     	; 0x264a <__mulsf3_pse+0x90>
    265a:	fe 2b       	or	r31, r30
    265c:	88 0f       	add	r24, r24
    265e:	91 1d       	adc	r25, r1
    2660:	96 95       	lsr	r25
    2662:	87 95       	ror	r24
    2664:	97 f9       	bld	r25, 7
    2666:	08 95       	ret

00002668 <__udivmodsi4>:
    2668:	a1 e2       	ldi	r26, 0x21	; 33
    266a:	1a 2e       	mov	r1, r26
    266c:	aa 1b       	sub	r26, r26
    266e:	bb 1b       	sub	r27, r27
    2670:	fd 01       	movw	r30, r26
    2672:	0d c0       	rjmp	.+26     	; 0x268e <__udivmodsi4_ep>

00002674 <__udivmodsi4_loop>:
    2674:	aa 1f       	adc	r26, r26
    2676:	bb 1f       	adc	r27, r27
    2678:	ee 1f       	adc	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	a2 17       	cp	r26, r18
    267e:	b3 07       	cpc	r27, r19
    2680:	e4 07       	cpc	r30, r20
    2682:	f5 07       	cpc	r31, r21
    2684:	20 f0       	brcs	.+8      	; 0x268e <__udivmodsi4_ep>
    2686:	a2 1b       	sub	r26, r18
    2688:	b3 0b       	sbc	r27, r19
    268a:	e4 0b       	sbc	r30, r20
    268c:	f5 0b       	sbc	r31, r21

0000268e <__udivmodsi4_ep>:
    268e:	66 1f       	adc	r22, r22
    2690:	77 1f       	adc	r23, r23
    2692:	88 1f       	adc	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	1a 94       	dec	r1
    2698:	69 f7       	brne	.-38     	; 0x2674 <__udivmodsi4_loop>
    269a:	60 95       	com	r22
    269c:	70 95       	com	r23
    269e:	80 95       	com	r24
    26a0:	90 95       	com	r25
    26a2:	9b 01       	movw	r18, r22
    26a4:	ac 01       	movw	r20, r24
    26a6:	bd 01       	movw	r22, r26
    26a8:	cf 01       	movw	r24, r30
    26aa:	08 95       	ret

000026ac <__umulhisi3>:
    26ac:	a2 9f       	mul	r26, r18
    26ae:	b0 01       	movw	r22, r0
    26b0:	b3 9f       	mul	r27, r19
    26b2:	c0 01       	movw	r24, r0
    26b4:	a3 9f       	mul	r26, r19
    26b6:	70 0d       	add	r23, r0
    26b8:	81 1d       	adc	r24, r1
    26ba:	11 24       	eor	r1, r1
    26bc:	91 1d       	adc	r25, r1
    26be:	b2 9f       	mul	r27, r18
    26c0:	70 0d       	add	r23, r0
    26c2:	81 1d       	adc	r24, r1
    26c4:	11 24       	eor	r1, r1
    26c6:	91 1d       	adc	r25, r1
    26c8:	08 95       	ret

000026ca <memset>:
    26ca:	dc 01       	movw	r26, r24
    26cc:	01 c0       	rjmp	.+2      	; 0x26d0 <memset+0x6>
    26ce:	6d 93       	st	X+, r22
    26d0:	41 50       	subi	r20, 0x01	; 1
    26d2:	50 40       	sbci	r21, 0x00	; 0
    26d4:	e0 f7       	brcc	.-8      	; 0x26ce <memset+0x4>
    26d6:	08 95       	ret

000026d8 <__itoa_ncheck>:
    26d8:	bb 27       	eor	r27, r27
    26da:	4a 30       	cpi	r20, 0x0A	; 10
    26dc:	31 f4       	brne	.+12     	; 0x26ea <__itoa_ncheck+0x12>
    26de:	99 23       	and	r25, r25
    26e0:	22 f4       	brpl	.+8      	; 0x26ea <__itoa_ncheck+0x12>
    26e2:	bd e2       	ldi	r27, 0x2D	; 45
    26e4:	90 95       	com	r25
    26e6:	81 95       	neg	r24
    26e8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ea:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__utoa_common>

000026ee <__utoa_ncheck>:
    26ee:	bb 27       	eor	r27, r27

000026f0 <__utoa_common>:
    26f0:	fb 01       	movw	r30, r22
    26f2:	55 27       	eor	r21, r21
    26f4:	aa 27       	eor	r26, r26
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	aa 1f       	adc	r26, r26
    26fc:	a4 17       	cp	r26, r20
    26fe:	10 f0       	brcs	.+4      	; 0x2704 <__utoa_common+0x14>
    2700:	a4 1b       	sub	r26, r20
    2702:	83 95       	inc	r24
    2704:	50 51       	subi	r21, 0x10	; 16
    2706:	b9 f7       	brne	.-18     	; 0x26f6 <__utoa_common+0x6>
    2708:	a0 5d       	subi	r26, 0xD0	; 208
    270a:	aa 33       	cpi	r26, 0x3A	; 58
    270c:	08 f0       	brcs	.+2      	; 0x2710 <__utoa_common+0x20>
    270e:	a9 5d       	subi	r26, 0xD9	; 217
    2710:	a1 93       	st	Z+, r26
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	79 f7       	brne	.-34     	; 0x26f4 <__utoa_common+0x4>
    2716:	b1 11       	cpse	r27, r1
    2718:	b1 93       	st	Z+, r27
    271a:	11 92       	st	Z+, r1
    271c:	cb 01       	movw	r24, r22
    271e:	0c 94 91 13 	jmp	0x2722	; 0x2722 <strrev>

00002722 <strrev>:
    2722:	dc 01       	movw	r26, r24
    2724:	fc 01       	movw	r30, r24
    2726:	67 2f       	mov	r22, r23
    2728:	71 91       	ld	r23, Z+
    272a:	77 23       	and	r23, r23
    272c:	e1 f7       	brne	.-8      	; 0x2726 <strrev+0x4>
    272e:	32 97       	sbiw	r30, 0x02	; 2
    2730:	04 c0       	rjmp	.+8      	; 0x273a <strrev+0x18>
    2732:	7c 91       	ld	r23, X
    2734:	6d 93       	st	X+, r22
    2736:	70 83       	st	Z, r23
    2738:	62 91       	ld	r22, -Z
    273a:	ae 17       	cp	r26, r30
    273c:	bf 07       	cpc	r27, r31
    273e:	c8 f3       	brcs	.-14     	; 0x2732 <strrev+0x10>
    2740:	08 95       	ret

00002742 <_exit>:
    2742:	f8 94       	cli

00002744 <__stop_program>:
    2744:	ff cf       	rjmp	.-2      	; 0x2744 <__stop_program>
